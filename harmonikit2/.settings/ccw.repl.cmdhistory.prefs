cmdhistory=["(harmonikit (buf/buffer-id b) 70)" "(on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)\\n                                          vel (* 0.05 (\:velocity e))]\\n                                      (harmonikit note vel)))\\n                                  \:\:keyboard-handler)" "(overtone.live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)\\n                                          vel (* 0.05 (\:velocity e))]\\n                                      (harmonikit note vel)))\\n                                  \:\:keyboard-handler)" "(use 'overtone.live)" "(on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)\\n                                          vel (* 0.05 (\:velocity e))]\\n                                      (harmonikit note vel)))\\n                                  \:\:keyboard-handler)" "(on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)\\n                                          vel (\:velocity e)]\\n                                      (harmonikit note vel)))\\n                                  \:\:keyboard-handler)" "(use 'overtone.live)" "(on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit note)))\\n                                  \:\:keyboard-handler)" "(use 'overtone.live)" "(harmonikit (buf/buffer-id b) 70)" "(patch->buf patch b)" "(harmonikit (buf/buffer-id b) 70)" "(on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit note)))\\n                                  \:\:keyboard-handler)" "(odoc on-vent)" "(odoc on-event)" "(on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)))\\n                                  \:\:keyboard-handler)" "(harmonikit (buf/buffer-id b) 70)" "(harmonikit 70)" "(harmonikit (buf/buffer-id b) 70)" "(harmonikit 70)" "(on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(odoc on-event)" "(odoc live/on-event)" "(live/odoc on event)" "(live/odoc on-event)" "(live/odoc live/on-event)" "(live/on-event [\:midi \:note-off]\\n                                  ( node/ctl *1 \:gate 0)\\n                                  \:\:keyboard-handler)" "(node/ctl *1 \:gate 0)" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)))\\n                                  \:\:keyboard-handler)" "(live/event-debug-on)" "(node/ctl *1 \:gate 0)" "(node/ctl (harmonikit (buf/buffer-id b) 41) \:gate 0)" "(map [])" "(def my-atom (atom {}))" "(my-atom)" "(swap\! my-atom conj 1)" "(def my-atom (atom ({})))" "(def my-atom (atom ()))" "(swap\! my-atom conj 1)" " (swap\! my-atom conj 1)\\n(1)" "(def my-atom (atom ([1 2 3 4 5 6 7 8])))" "(def my-atom (atom []))" "(swap\! my-atom assoc 1)" "\\n(swap\! my-atom assoc 0 1)" "(swap\! my-atom conj  1)" "(my-atom)" "@my-atom" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (swap\! my-atom conj  note)))\\n                                  \:\:keyboard-handler)" "@my-atom" "(live/on-event [\:midi \:note-off]\\n               (fn [e]\\n                 (node/ctl @my-atom  \:gate 0)\\n)\\n               )" "(live/on-event [\:midi \:note-off]\\n               (fn [_]\\n                 ((node/ctl @my-atom  \:gate 0)))\\n)" "(live/on-event [\:midi \:note-off]\\n               (fn [e]\\n                 (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (node/ctl @my-atom \:gate 0)))\\n)" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (swap\! my-atom conj  note)))\\n                                  \:\:keyboard-handler)" "@my-atom" "(node/ctl @my-atom \:gate 0)" "(dissoc my-atom 38)" "(dissoc @my-atom 38)" "(swap\! my-atom dissoc 38)" "(swap\! my-atom assoc  10)" "(swap\! my-atom assoc nil  10)" "[ 1 3 5 6]" "(dissoc [1 3 5 6] 5)" "{1 3 5 6}" " (dissoc {1 3 5 6}\\n         5)" "(def my-atom (atom {}))" "(assoc @my-atom 0 1)" "(assoc @my-atom \\n       1)" "(assoc @my-atom 3\\n       1)" "(assoc @my-atom \:key\\n          1)" "(assoc @my-atom \:key\\n             1)" "(swap\! my-atom conj  note)" "(swap\! my-atom conj  1)" "(swap\! my-atom conj  note)" "(swap\! my-atom assoc 1 note)" "(def my-atom (atom {}))" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (swap\! my-atom conj  note)))\\n                                  \:\:keyboard-handler)" "(def my-atom (atom {}))" "\\n(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (swap\! my-atom conj  note)))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "@my-atom" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (swap\! my-atom assoc  note)))\\n                                  \:\:keyboard-handler)" "(def my-atom (atom [1 2 3 4 5 6]))" "@my-atom" "(swap\! my-atom dissoc  2)" "(doc map)" "(live/odoc map)" "(def my-atom (atom {1 2 3 4 5 6}))" "(srv/stop)" "@my-atom" "(def i 1)\\n(def i+1 (inc i))" "(i)" "@i" "(inc i)" "(def i+1 (inc i))" "(inc i)" "(def my-atom (atom {}))" "(def i (atom 0))" "(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "@my-atom" "(node/ctl *1 \:gate 0)" "(swap\! my-atom dissoc 1)" "(swap\! my-atom dissoc 4)" "(select-keys my-atom  3)" "(select-keys my-atom  [3])" "(get @my-atom 3)" "(srv/stop)\\n\\n(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                                  (fn [e]\\n                                    (let [note (\:note e)]\\n                                      (harmonikit (buf/buffer-id b) note)\\n                                      (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)\\n\\n\\n(live/on-event [\:midi \:note-off]\\n               (fn [e]\\n                 (let [note (\:note e)]             \\n                                      (node/ctl (get @my-atom i) \:gate 0)\\n                                      (swap\! my-atom dissoc (swap\! i dec ))))\\n)" "(live/on-event [\:midi \:note-off]\\n                         (fn [e]\\n                           (let [note (\:note e)]             \\n                            (node/ctl (get @my-atom i) \:gate 0)\\n                            (swap\! my-atom dissoc (swap\! i dec ))))\\n                             \:\:keyboard-handler)" "(def my-atom (atom {}))\\n(def i (atom 0))" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "@my-atom" "(node/ctl (get @my-atom i) \:gate 0)" "(node/ctl 41 \:gate 0)" " @my-atom" "(node/ctl 36 \:gate 0)" "(node/ctl *36 \:gate 0)" "(node/ctl 36 \:gate 0)" "(node/ctl *1 \:gate 0)" "(srv/stop)" "(node/ctl *1 \:gate 0)" "(node/ctl (harmonikit (buf/buffer-id b) 36) \:gate 0)" "(harmonikit (buf/buffer-id b) 70)" "(srv/stop)" "(harmonikit (buf/buffer-id b) 70)" "(node/ctl *1 \:gate 0)" "(harmonikit (buf/buffer-id b) 70)" "(node/ctl *1 \:gate 0)" "(harmonikit (buf/buffer-id b) 36)" "(live/event-debug-on)" "(harmonikit (buf/buffer-id b) 70)" "(node/ctl (harmonikit 91) \:gate 0)" "(srv/stop)" "(node/ctl (harmonikit (get @my-atom i)) \:gate 0)" "(get @my-atom i)" "(srv/stop)\\n\\n(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(@my-atom)" "@my-atom" "(get @my-atom i)" "(get @my-atom 1)" "(get @my-atom (i dec))" " (get @my-atom (swap\! i dec))" "@my-atom" "@i" "(get @my-atom @i)" "(node/ctl (harmonikit (get @my-atom @i)) \:gate 0)" "(node/ctl (harmonikit (- 1 (get @my-atom @i))) \:gate 0)" "(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "@my-atom" "(swap\! my-atom dissoc (swap\! i dec ))" "(def my-atom (atom {}))\\n(def i (atom 0))" "@my-atom" "i" "(swap\! my-atom dissoc i)" "(swap\! my-atom dissoc @i)" "(swap\! i dec)" "\\n(swap\! my-atom dissoc @i)(swap\! i dec)" "(swap\! my-atom dissoc @i)(swap\! i dec)" " (harmonikit (buf/buffer-id b) 70)" "richhickey.harmone8a/harmonikit 44" "(node/ctl *1 \:gate 0)" "(harmonikit (buf/buffer-id b) 70)" "(srv/stop)" "(harmonikit (buf/buffer-id b) 70)" "(harmonikit 70)" "(synth-node )" "(node/ctl *1 \:gate 0)" "(def server (osc/osc-server 44100 \\"osc-clj\\"))" "(osc/zero-conf-on)" "(live/sc-osc-debug-on)" "(osc-listen server (fn [msg] (println msg)) \:debug)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(live/on-event [\:midi \:note-off]\\n                         (fn [e]\\n                           (let [note (\:note e)]             \\n                            (node/ctl (harmonikit (get @my-atom @i)) \:gate 0)\\n                            (swap\! my-atom dissoc @i)\\n                            (swap\! i dec)))\\n                             \:\:keyboard-handler)" "(def server (osc/osc-server 44100 \\"osc-clj\\"));;on defini un serveur osc, le port de sorti 44100 est arbitraire\\n(osc/zero-conf-on);; on rend visible le serveur\\n(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(def my-atom (atom {}))\\n(def i (atom 0))" "(harmonikit (buf/buffer-id b) 70)" "(def patch\\n     {\:harmonikit/rev 1\\n      \:name \\"Patch 42\\"\\n\\n      \:master {\:toggle 1.0}\\n      \:master-curves {\:attack 0.5 \:decay 0.5 \:fade 0.75 \:release 0.0}\\n      \:high-harmonics {\:toggle 1.0 \:taper 0.0}\\n      \:freq-envelope {\:toggle 1.0 \:init 0.5 \:rate 0.5 \:freq -0.5 \:return 0.5\\n                      \:freq-fscale 0.0 \:rate-fscale 0.0 \:freq-ascale 0.0 \:rate-ascale 0.0}\\n      \:lfo {\:toggle 0.0 \:rate 0.2 \:fscale 0.5 \:ramp 0.5 \:amp-mod 0.9 \:freq-mod 0.5 \:depth 0.5}\\n\\n      \:master-env\\n      {\:gain {\:val 0.5 \:fscale 0.15 \:ascale 0.0}\\n       \:delay {\:val 0.0 \:fscale 0.0 \:ascale 0.0}\\n       \:attack {\:val 1.0 \:fscale 0.5 \:ascale -0.75}\\n       \:decay {\:val 1.0 \:fscale 0.0 \:ascale 0.0}\\n       \:sustain {\:val 1.0 \:fscale 0.0 \:ascale 0.0}\\n       \:fade {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n       \:release {\:val 1.0 \:fscale 0.0 \:ascale 0.0}}\\n\\n      \:harmonics\\n      {\:gain [0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75\\n              0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75]\\n       \:delay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:attack [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:decay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:sustain [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:fade [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:release [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:toggle [1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0]\\n       \:ascale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:fscale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]}\\n\\n      \:resonances\\n      {\:toggle [1.0 1.0 0.0 0.0]\\n       \:freq [0.5 0.65 0.1 0.1]\\n       \:width [0.01 0.01 0.1 0.1]\\n       \:gain [0.95 0.95 0.0 0.0]}})" "(harmonikit (buf/buffer-id b) 70)" "(patch->buf patch b)" "(harmonikit (buf/buffer-id b) 70)" "(bget bid \:master-curves \:attack)" "(patch)" "@patch" "(val patch)" "(patch \:master)" "(patch \:master \:toggle)" "(harmonikit note)" "(patch \:harmonics)" "(patch \:gain)" "(patch \:harmonics \:gain)" "(patch \:harmonics/gain)" "(key patch )" "(patch)" "(key (patch \:harmonics)\\n     )" "( key my-atom)" "(key @my-atom)" "(map key patch)" "(map patch)" "(count patch)" "(get patch \:harmonics)" " (get \:gain(get patch \:harmonics))" " (get (get patch \:harmonics) \:gain)" "((patch \:harmonics) \:gain)" "(def patch\\n     {\:harmonikit/rev 1\\n      \:name \\"Patch 42\\"\\n\\n      \:master {\:toggle 1.0}\\n      \:master-curves {\:attack 0.5 \:decay 0.5 \:fade 0.75 \:release 0.0}\\n      \:high-harmonics {\:toggle 1.0 \:taper 0.0}\\n      \:freq-envelope {\:toggle 1.0 \:init 0.5 \:rate 0.5 \:freq -0.5 \:return 0.5\\n                      \:freq-fscale 0.0 \:rate-fscale 0.0 \:freq-ascale 0.0 \:rate-ascale 0.0}\\n      \:lfo {\:toggle 0.0 \:rate 0.2 \:fscale 0.5 \:ramp 0.5 \:amp-mod 0.9 \:freq-mod 0.5 \:depth 0.5}\\n\\n      \:master-env\\n      {\:gain {\:val 0.5 \:fscale 0.15 \:ascale 0.0}\\n       \:delay {\:val 0.0 \:fscale 0.0 \:ascale 0.0}\\n       \:attack {\:val 0.5 \:fscale 0.5 \:ascale -0.75}\\n       \:decay {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n       \:sustain {\:val 0.25 \:fscale 0.0 \:ascale 0.0}\\n       \:fade {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n       \:release {\:val 0.5 \:fscale 0.0 \:ascale 0.0}}\\n\\n      \:harmonics\\n      {\:gain [0.75 0.75 1.0 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75\\n              0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75]\\n       \:delay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:attack [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:decay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:sustain [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:fade [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:release [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:toggle [1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0]\\n       \:ascale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n       \:fscale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]}\\n\\n      \:resonances\\n      {\:toggle [1.0 1.0 0.0 0.0]\\n       \:freq [0.5 0.65 0.1 0.1]\\n       \:width [0.01 0.01 0.1 0.1]\\n       \:gain [0.95 0.95 0.0 0.0]}})" "((patch \:harmonics) \:gain)" "(((patch \:harmonics) \:gain) 1.0)" "(vector a)" "(vector )" "(count ((patch \:harmonics) \:gain))" "(pop ((patch \:harmonics) \:gain))" "(count ((patch \:harmonics) \:gain))" "(pop ((patch \:harmonics) \:gain))" "((patch \:harmonics) \:gain)" "(((patch \:master-env)\:gain)\:val)" "(swap\! ((patch \:master-env)\:gain) \:val 1)" "(assoc ((patch \:master-env)\:gain) \:val 1)" "(((patch \:master-env)\:gain)\:val)" "(swap\! ((patch \:master-env)\:gain) assoc \:val 1)" "(def my-atom (atom {}))\\n(def i (atom 0))\\n(def server (osc/osc-server 44100 \\"osc-clj\\"));;on defini un serveur osc, le port de sorti 44100 est arbitraire\\n(osc/zero-conf-on);; on rend visible le serveur\\n(osc/osc-listen server (fn [msg] (println msg)) \:debug)\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(defn control-harmonikit \\n [val] \\n (let [val (scale-range val 0 1 1 120)]\\n      (ctl harmonikit \:note val)))" "(live/odoc scale-range)" "(live/odoc on-event)" "(live/odoc live/scale-range)" "(defn control-harmonikit \\n    [val] \\n    (let [val (live/scale-range val 0 1 1 120)]\\n         (ctl harmonikit \:note val)))" "(defn control-foo \\n [val] \\n (let [val (live/scale-range val 0 1 50 1000)]\\n      (live/ctl foo \:freq val)))" "(defn control-harmonikit \\n [val] \\n (let [val (live/scale-range val 0 1 1 120)]\\n      (live/ctl harmonikit \:note val)))" "(osc/osc-handle server \\"/1/fader1\\" (fn [msg] (control-harmonikit (first (\:args msg)))))" "(patch \:master-env)" "(\:gain (patch \:master-env))" "(assoc (\:gain (patch \:master-env)) \:val 1.0)" "(def patch\\n    (atom {\:harmonikit/rev 1\\n           \:name \\"Patch 42\\"\\n\\n           \:master {\:toggle 1.0}\\n           \:master-curves {\:attack 0.5 \:decay 0.5 \:fade 0.75 \:release 0.0}\\n           \:high-harmonics {\:toggle 1.0 \:taper 0.0}\\n           \:freq-envelope {\:toggle 1.0 \:init 0.5 \:rate 0.5 \:freq -0.5 \:return 0.5\\n                           \:freq-fscale 0.0 \:rate-fscale 0.0 \:freq-ascale 0.0 \:rate-ascale 0.0}\\n           \:lfo {\:toggle 0.0 \:rate 0.2 \:fscale 0.5 \:ramp 0.5 \:amp-mod 0.9 \:freq-mod 0.5 \:depth 0.5}\\n\\n           \:master-env\\n           {\:gain {\:val 0.5 \:fscale 0.15 \:ascale 0.0}\\n            \:delay {\:val 0.0 \:fscale 0.0 \:ascale 0.0}\\n            \:attack {\:val 0.5 \:fscale 0.5 \:ascale -0.75}\\n            \:decay {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n            \:sustain {\:val 0.25 \:fscale 0.0 \:ascale 0.0}\\n            \:fade {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n            \:release {\:val 0.5 \:fscale 0.0 \:ascale 0.0}}\\n\\n           \:harmonics\\n           {\:gain [0.75 0.75 1 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75\\n                   0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75]\\n            \:delay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n            \:attack [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n            \:decay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n            \:sustain [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n            \:fade [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n            \:release [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n            \:toggle [1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0]\\n            \:ascale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n            \:fscale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]}\\n\\n           \:resonances\\n           {\:toggle [1.0 1.0 0.0 0.0]\\n            \:freq [0.5 0.65 0.1 0.1]\\n            \:width [0.01 0.01 0.1 0.1]\\n            \:gain [0.95 0.95 0.0 0.0]}}))" "(srv/stop)" "(patch->buf patch b)" "(assoc (\:gain (patch \:master-env)) \:val 1.0)" "(swap\! patch assoc (\:gain (patch \:master-env)) \:val 1.0 )" "((\:gain (patch \:master-env))\\n  )" "(\:gain (patch \:master-env))" "(\:gain (@patch \:master-env))" "(swap\! patch assoc (\:gain (@patch \:master-env)) \:val 1.0 )" "(swap\! patch assoc (\:gain (patch \:master-env)) \:val 0 )" "(swap\! patch assoc (\:gain (@patch \:master-env)) \:val 1.0 )" "(swap\! patch assoc (\:gain (@patch \:master-env)) \:val 0.1 )" "(\:gain (@patch \:master-env))" "(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "@my-atom" "(kill harmonikit)" "(harmonikit (buf/buffer-id b) 70)" "(kill 65)" "(live/kill 65)" "(live/kill harmonikit)" "(live/on-event [\:midi \:note-off]\\n                         (fn [e]\\n                           (let [note (\:note e)]             \\n                           (live/kill harmonikit) ))\\n                             \:\:keyboard-handler)" "(live/on-event [\:midi \:note-off]\\n                         (fn [e]\\n                           (let [note (\:note e)]             \\n                            (node/ctl (harmonikit (get @my-atom @i)) \:gate 0)\\n                            (swap\! my-atom dissoc @i)\\n                            (swap\! i dec)))\\n                             \:\:keyboard-handler)" "(live/event-debug-on)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-off]\\n                         (fn [e]\\n                           (let [note (\:note e)]             \\n                            (node/ctl (harmonikit (get @my-atom @i)) \:gate 0)\\n                            (swap\! my-atom dissoc @i)\\n                            (swap\! i dec)))\\n                             \:\:keyboard-handler)" "(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(node/ctl *1 \:gate 0)" "(srv/stop)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(async/go\\n (loop []\\n   (let [{\:keys [path args]} (async/<\! qchan)]\\n     ;;(prn msg)\\n     (when [\:midi \:note-on]\\n       (let [[note vel] args]\\n         (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))\\n           (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0))))))\\n     (recur))))" "(live/midi-device-keys)" "(live/event-debug-on)" "(async/go\\n (loop []\\n   (let [{\:keys [path args]} (async/<\! qchan)]\\n     ;;(prn msg)\\n     (live/on-event [\:midi \:note-on]\\n       (let [[note vel] args]\\n         (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))\\n           (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0))))))\\n     (recur))))" "(async/go\\n (loop []\\n   (let [{\:keys [path args]} (async/<\! qchan)]\\n     ;;(prn msg)\\n     (live/on-event [\:midi \:note-on]\\n     (fn [e]\\n      (let [note (\:note e) vel (\:velocity e)]\\n         (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))\\n           (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))))\\n     (recur))))" "(live/event-debug-on)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(def my-atom (atom {}))\\n(def i (atom 0))\\n\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                  (swap\! my-atom assoc (swap\! i inc)  note)))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                  (harmonikit (buf/buffer-id b) note)\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "@notes" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))\\n           (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)\\n\\n                              )" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                  (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0))))))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                  (if (\=\= 127 vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0))))))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [synth (get @notes note)]\\n                                  (node/ctl synth \:gate 0.0)))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (let [synth (get @notes note)]\\n                                  (node/ctl synth \:gate 0.0))))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (let [synth (get @notes note)]\\n                                  (println synth)\\n                                  (node/ctl synth \:gate 0.0))))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(osc-listen server (fn [msg] (println \\"Listener\: \\" msg)) \:debug)" "(osc/osc-listen server (fn [msg] (println \\"Listener\: \\" msg)) \:debug)" "(srv/stop)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(defn control-harmonikit \\n [val] \\n (let [val (live/scale-range val 0 1 1 120)]\\n      (live/ctl harmonikit \:note val)))\\n\\n(osc/osc-handle server \\"/1/fader1\\" (fn [msg] (control-harmonikit (first (\:args msg)))))" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/event-debug-on)" "(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(live/event-debug-off)" "(srv/stop)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (let [synth (get @notes note)]\\n                                  (println synth)\\n                                  (node/ctl synth \:gate 0.0))))\\n                                  \:\:keyboard-handler)" "(live/event-monitor-on)" "\\n(live/on-event [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/odoc live/event-monitor-on)" "\#'event-monitor" "(live/event-debug-on)" "(srv/stop)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (let [synth (get @notes note)]\\n                                  (println synth)\\n                                  (node/ctl synth \:gate 0.0))))\\n                                  \:\:keyboard-handler)" "(live/on-event a [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/event-debug-off)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(doc subvec)" "(live/odoc subvec)" "(srv/stop)" " (srv/stop)" "(srv/stop)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" " (osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(srv/stop)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)\\n(srv/stop)" "(srv/stop)" "(patch \:harmonics)" "(\:toggle(patch \:harmonics))" "(patch \:harmonics)" "@apatch" "(patch \:harmonics)" "(@apatch \:harmonics)" "(\:toggle (@apatch \:harmonics))" "(@apatch \:harmonics)" "(\:toggle (@apatch \:harmonics))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 0))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 3 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 0))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 3 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 3 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 0))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 0))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 ))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(subvec [12 3 4 5 6 7] 2)" "(subvec [12 3 4 5 6 7] 2 2)" "(subvec [12 3 4 5 6 7] 2 3)" "(subvec [12 3 4 5 6 7] 0)" "(subvec [12 3 4 5 6 7] 0 0)" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 2 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 2 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(live/odoc float)" "(subvec [12 3 4 5 6 7] 0)" "(subvec [12 3 4 5 6 7] 0 0\\n    )" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 2 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)\\n                                                                       (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))))))\\n                                  \:\:keyboard-handler)\\n                              )" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)\\n                                    (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))))))\\n                                  \:\:keyboard-handler))" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))))\\n                                  \:\:keyboard-handler)" "(live/event-debug-on)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)\\n                                                                       (if (\=\= e 71)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0)))))))\\n                                  \:\:keyboard-handler)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop))))\\n                                  \:\:keyboard-handler)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop))))\\n                                  \:\:keyboard-handler)" "(\:gain (@apatch \:harmonics))" "(\:toggle (@apatch \:harmonics))" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(\:gain (@apatch \:harmonics))" "(\:toggle (@apatch \:harmonics))" " (\:gain (@apatch \:harmonics))" "(live/odoc str)" "(live/event-debug-on)" "(harmonikit (buf/buffer-id b) 70)" "(ns richhickey.harmonikit\\n  (\:require [overtone.osc \:as osc]\\n            [overtone.osc.util \:as osc-util]\\n            [overtone.sc.buffer \:as buf]\\n            [overtone.sc.server \:as srv]\\n            [overtone.sc.ugens \:as ugen]\\n            [overtone.sc.machinery.synthdef \:as sdef]\\n            [overtone.sc.machinery.server.comms \:as com]\\n            [overtone.studio.inst \:as inst]\\n            [overtone.sc.envelope \:as env]\\n            [overtone.sc.cgens.line \:as lin]\\n            [overtone.sc.node \:as node]\\n             [overtone.live \:as live]\\n            [clojure.core.async \:as async]\\n            [clojure.edn \:as edn]\\n            [clojure.java.io \:as io]\\n            [clojure.pprint \:as pp]\\n            ;; Needed to boot Overtone (Temporary)\\n            [overtone.studio.mixer \:as omix]))" ";; Boot the Overtone Server for live demo\\n(defonce __AUTO-BOOT__\\n  (when (srv/server-disconnected?)\\n    (omix/boot-server-and-mixer)))\\n\\n;; a dummy patch that will be used to calc offsets and mappings\\n(def patch\\n  {\:harmonikit/rev 1\\n   \:name \\"Patch 42\\"\\n\\n   \:master {\:toggle 1.0}\\n   \:master-curves {\:attack 0.5 \:decay 0.5 \:fade 0.75 \:release 0.0}\\n   \:high-harmonics {\:toggle 1.0 \:taper 0.0}\\n   \:freq-envelope {\:toggle 1.0 \:init 0.5 \:rate 0.5 \:freq -0.5 \:return 0.5\\n                   \:freq-fscale 0.0 \:rate-fscale 0.0 \:freq-ascale 0.0 \:rate-ascale 0.0}\\n   \:lfo {\:toggle 0.0 \:rate 0.2 \:fscale 0.5 \:ramp 0.5 \:amp-mod 0.9 \:freq-mod 0.5 \:depth 0.5}\\n\\n   \:master-env\\n   {\:gain {\:val 0.5 \:fscale 0.15 \:ascale 0.0}\\n    \:delay {\:val 0.0 \:fscale 0.0 \:ascale 0.0}\\n    \:attack {\:val 0.5 \:fscale 0.5 \:ascale -0.75}\\n    \:decay {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n    \:sustain {\:val 0.25 \:fscale 0.0 \:ascale 0.0}\\n    \:fade {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n    \:release {\:val 0.5 \:fscale 0.0 \:ascale 0.0}}\\n\\n   \:harmonics\\n   {\:gain [0.75 0.75 1 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75\\n           0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75]\\n    \:delay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:attack [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:decay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:sustain [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:fade [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:release [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:toggle [1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0]\\n    \:ascale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:fscale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]}\\n\\n   \:resonances\\n   {\:toggle [1.0 1.0 0.0 0.0]\\n    \:freq [0.5 0.65 0.1 0.1]\\n    \:width [0.01 0.01 0.1 0.1]\\n    \:gain [0.95 0.95 0.0 0.0]}})\\n\\n(defn patch-offsets [offset level]\\n  (cond\\n   (map? level) (reduce-kv (fn [[o ret] k v]\\n                             (let [[o nv] (patch-offsets o v)]\\n                               [o (assoc ret k nv)]))\\n                           [offset {}] level)\\n   (vector? level) (reduce (fn [[o ret] v]\\n                             (let [[o nv] (patch-offsets o v)]\\n                               [o (conj ret nv)]))\\n                           [offset []] level)\\n   \:else [(inc offset) offset]))\\n\\n(let [[nparams offsets] (patch-offsets 0 patch)]\\n  (def offsets offsets)\\n  (def nparams nparams))\\n\\n(def BASE_HARMS 24)\\n(def NHARMS 100)\\n\\n;;todo - make buffers part of synth objects to support multitimbral\\n(def b (buf/buffer nparams))\\n\\n(buf/buffer-id b)" "(defn ugen-deps\\n  \\"Returns a set of the deps (arguments) of this ugen that are themselves\\n  upstream ugens.\\"\\n  [ug]\\n  (set (\#'overtone.sc.synth/ugen-children ug)))\\n\\n(defn topological-sort-ugens-x\\n  \\"Sort into a vector where each node in the directed graph of ugens\\n  will always be preceded by its upstream dependencies.\\n  Depth first, from\:\\n\\n  http\://en.wikipedia.org/wiki/Topological_sorting,\\n\\n  following the advice here\:\\n\\n  http\://supercollider.svn.sourceforge.net/viewvc/supercollider/trunk/common/build/Help/ServerArchitecture/Synth-Definition-File-Format.html\\n\\n  'For greatest efficiency\:\\n\\n  Unit generators should be listed in an order that permits efficient\\n  reuse of connection buffers, which means that a depth first\\n  topological sort of the graph is preferable to breadth first.'\\"\\n  [ugens]\\n  (let [visit (fn visit [[ret visited path \:as acc] ug]\\n                (cond\\n                 (visited ug) acc\\n                 (path ug) (throw (Exception. \\"ugen graph contains cycle\\"))\\n                 \:else\\n                 (let [[ret visited path \:as acc]\\n                       (reduce visit [ret visited (conj path ug)] (ugen-deps ug))]\\n                   [(conj ret ug) (conj visited ug) path])))]\\n    (first (reduce visit [[] \#{} \#{}] ugens))))\\n\\n(alter-var-root \#'overtone.sc.synth/topological-sort-ugens (constantly topological-sort-ugens-x))\\n\\n(defn load-synthdef-x\\n  \\"Synchronously load an Overtone synth definition onto the audio\\n  server. The synthdef is also stored so that it can be re-loaded if the\\n  server gets rebooted. If the server is currently not running, the\\n  synthdef loading is delayed until the server has succesfully\\n  connected.\\"\\n  [sdef]\\n  (assert (sdef/synthdef? sdef))\\n  (dosync (alter sdef/loaded-synthdefs* assoc (\:name sdef) sdef))\\n\\n  (when (srv/server-connected?)\\n    (let [bytes (sdef/synthdef-bytes sdef)]\\n      (com/with-server-sync\\n        (if (< (count bytes) (- osc-util/BUFFER-SIZE 4))\\n          \#(srv/snd \\"/d_recv\\" bytes)\\n          (let [path (str (System/getProperty \\"java.io.tmpdir\\")  (-> (\:name sdef) symbol name) \\".scsyndef\\")]\\n            (sdef/synthdef-write sdef path)\\n            \#(srv/snd \\"/d_load\\" path)))\\n        (str \\"whilst loading synthdef \\" (\:name sdef))))))\\n\\n(alter-var-root \#'overtone.sc.machinery.synthdef/load-synthdef (constantly load-synthdef-x))\\n\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; end patching overtone ;;;;;;;;;;;;;;;;;;;;;;;;;\\n\\n(defn patch->buf [patch buf]\\n  (let [arr (double-array nparams)\\n        blit (fn blit [level offset]\\n               (cond\\n                (map? level) (reduce-kv (fn [_ k v]\\n                                          (blit v (offset k)))\\n                                        nil level)\\n                (vector? level) (dorun (map-indexed (fn [i v]\\n                                                      (let [off (nth offset i)]\\n                                                        (blit v off)))\\n                                                    level))\\n                (number? level) (aset-double arr offset level)))]\\n    (blit patch offsets)\\n    (buf/buffer-write\! buf arr)))\\n\\n(patch->buf patch b)\\n\\n(defn bget\\n  ([bid k] (ugen/index\:kr bid (-> offsets (get k))))\\n  ([bid k1 k2] (ugen/index\:kr bid (-> offsets (get k1) (get k2))))\\n  ([bid k1 k2 k3] (ugen/index\:kr bid (-> offsets (get k1) (get k2) (get k3)))))\\n\\n(defn scaled [aval scale ratio]\\n  (ugen/with-overloaded-ugens\\n    (* aval (ugen/exp (* scale ratio)))))\\n\\n(defn master-scaled [aval bid k aratio fratio]\\n  (ugen/with-overloaded-ugens\\n    (* aval\\n       (ugen/exp (* (bget bid \:master-env k \:ascale) aratio))\\n       (ugen/exp (* (bget bid \:master-env k \:fscale) fratio)))))\\n\\n(defn scale8 [scale]\\n  (ugen/with-overloaded-ugens\\n    (ugen/pow 2 (* 3.0 scale))))\\n\\n(defn hscaled [aval bid h k]\\n  (ugen/with-overloaded-ugens\\n    (* aval (ugen/pow 2 (lin/lin-lin (bget bid \:harmonics k h) -1.0 1.0 -3.0 3.0)))))\\n\\n(defn harm [h hf bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (ugen/with-overloaded-ugens\\n    (let [amp (/ (scaled\\n                  (scaled (bget bid \:harmonics \:gain h) (bget bid \:harmonics \:ascale h) aratio)\\n                  (bget bid \:harmonics \:ascale h) fratio)\\n                 hf)\\n          delay (+ delay (bget bid \:harmonics \:delay h))\\n          attack (hscaled attack bid h \:attack)\\n          decay (hscaled decay bid h \:decay)\\n          sustain (hscaled sustain bid h \:sustain)\\n          fade (hscaled fade bid h \:fade)\\n          release (hscaled release bid h \:release)\\n          ectl (env/envelope [0 0 1.0 sustain 0 0]\\n                              [delay attack decay fade release]\\n                              [0\\n                               (bget bid \:master-curves \:attack)\\n                               (bget bid \:master-curves \:decay)\\n                               (bget bid \:master-curves \:fade)\\n                               (bget bid \:master-curves \:release)]\\n                              4)\\n          env (ugen/env-gen\:kr ectl gate)\\n          hfreq (* hf freq)]\\n      (* (bget bid \:harmonics \:toggle h)\\n         amp env\\n         (ugen/sin-osc hfreq)\\n         ;;anti-alias\\n         (ugen/select\:kr (< hfreq 20000) [0.0 1.0])))))" "(defmacro primary-harms [n bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (let [hs (map (fn [h]\\n                 `(harm ~h (+ 1 ~h) ~bid ~freq ~gate ~aratio ~fratio ~delay ~attack ~decay ~sustain ~fade ~release))\\n                (range n))]\\n    (cons '+ hs)))\\n\\n(defmacro high-harms [n bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (let [hs (map (fn [h]\\n                  `(harm 23 ~h ~bid ~freq ~gate ~aratio ~fratio ~delay ~attack ~decay ~sustain ~fade ~release))\\n                (range 24 n))]\\n    (cons '+ hs)))\\n\\n(defn lfo [bid depth fratio]\\n  (ugen/with-overloaded-ugens\\n    (let [freq (scaled (lin/lin-lin (bget bid \:lfo \:rate) 0.0 1.0 0.0 20.0)\\n                       fratio (bget bid \:lfo \:fscale))\\n          ectl (env/envelope [0 1.0]\\n                         [(bget bid \:lfo \:ramp)]\\n                         \:linear)\\n          env (ugen/env-gen\:kr ectl)]\\n      (* (+ depth (bget bid \:lfo \:depth)) env (bget bid \:lfo \:toggle) (ugen/sin-osc\:kr freq)))))\\n\\n(defn res [sig bid n]\\n  (ugen/with-overloaded-ugens\\n    (* 10\\n       (bget bid \:resonances \:toggle n)\\n       (bget bid \:resonances \:gain n)\\n       (ugen/resonz sig\\n               (ugen/octcps (lin/lin-lin (bget bid \:resonances \:freq n) 0.0 1.0 1.0 10.0))\\n               (bget bid \:resonances \:width n)))))\\n\\n(defn fine-rate [r]\\n  (ugen/with-overloaded-ugens\\n    (->> r (ugen/pow 2) (+ -1.0) ugen/squared)))\\n\\n(defn fenv [fin bid aratio fratio]\\n  (ugen/with-overloaded-ugens\\n    (let [ffscale (scale8 (bget bid \:freq-envelope \:freq-fscale))\\n          fascale (scale8 (bget bid \:freq-envelope \:freq-ascale))\\n          rfscale (scale8 (bget bid \:freq-envelope \:rate-fscale))\\n          rascale (scale8 (bget bid \:freq-envelope \:rate-ascale))\\n          f0 (bget bid \:freq-envelope \:init);;(scaled (scaled (bget bid \:freq-envelope \:init) ffscale fratio) fascale aratio)\\n          r0 (fine-rate (bget bid \:freq-envelope \:rate));;(scaled (scaled (bget bid \:freq-envelope \:rate) rfscale fratio) rascale aratio)\\n          f1 (bget bid \:freq-envelope \:freq);;(scaled (scaled (bget bid \:freq-envelope \:freq) ffscale fratio) fascale aratio)\\n          r1 (fine-rate (bget bid \:freq-envelope \:return));;(scaled (scaled (bget bid \:freq-envelope \:return) rfscale fratio) rascale aratio)\\n          ectl (env/envelope [f0 f1 0] ;;[1.0 -1.0 0]\\n                         [r0 r1] ;;[1.0 1.0]\\n                         \:linear)\\n          env (ugen/env-gen\:kr ectl)]\\n      (-> fin ugen/cpsoct (+ (* env (bget bid \:freq-envelope \:toggle))) ugen/octcps))))" "(inst/definst harmonikit\\n  [bid (buf/buffer-id b)\\n   note 60\\n   amp 0.25\\n   gate 1.0\\n   lfo-depth 0.0]\\n  (let [abase 0.125\\n        fbase 220\\n        freq (ugen/midicps note)\\n        aratio (ugen/log (/ amp abase))\\n        fratio (ugen/log (/ freq fbase))\\n        lfo (lfo bid lfo-depth fratio)\\n        envfreq (fenv freq bid aratio fratio)\\n        mfreq (-> envfreq ugen/cpsoct (+ (* (bget bid \:lfo \:freq-mod)\\n                                       (* 0.1 lfo)))\\n                  ugen/octcps)\\n        mamp (-> amp ugen/ampdb (+ (* (bget bid \:lfo \:amp-mod)\\n                                       (* 60.0 lfo)))\\n                 ugen/dbamp)\\n\\n        gain (master-scaled (bget bid \:master-env \:gain \:val) bid \:gain aratio fratio)\\n        delay (bget bid \:master-env \:delay \:val)\\n        attack (master-scaled (fine-rate (bget bid \:master-env \:attack \:val))\\n                              bid \:attack aratio fratio)\\n        decay (master-scaled (* 4 (fine-rate (bget bid \:master-env \:decay \:val)))\\n                             bid \:decay aratio fratio)\\n        sustain (master-scaled (bget bid \:master-env \:sustain \:val) bid \:sustain aratio fratio)\\n        fade (master-scaled (* 20.0 (bget bid \:master-env \:fade \:val))\\n                            bid \:fade aratio fratio)\\n        release (master-scaled (* 4.0 (bget bid \:master-env \:release \:val))\\n                               bid \:release aratio fratio)\\n        ectl (env/envelope [0 0 1.0 sustain 0 0]\\n                            [delay attack decay fade release]\\n                            [0\\n                             (bget bid \:master-curves \:attack)\\n                             (bget bid \:master-curves \:decay)\\n                             (bget bid \:master-curves \:fade)\\n                             (bget bid \:master-curves \:release)]\\n                            4)\\n        env (ugen/env-gen\:kr ectl gate mamp \:action ugen/FREE)\\n        sig (* (bget bid \:master \:toggle)\\n               env gain\\n               (+ (primary-harms 24 bid mfreq gate aratio fratio delay attack decay sustain fade release)\\n                  (high-harms 100 bid mfreq gate aratio fratio delay attack decay sustain fade release)))]\\n    (+ sig\\n       (res sig bid 0)\\n       (res sig bid 1)\\n       (res sig bid 2)\\n       (res sig bid 3))))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 2 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(defn chan->client [chan client]\\n  (async/go\\n   (loop []\\n     (let [[path args] (async/<\! chan)]\\n       (apply osc/osc-send client path args)\\n       (recur)))))\\n\\n(defn server->chan [server chan]\\n  (osc/osc-listen server (fn [msg] (async/put\! chan msg)) chan))\\n\\n\\n;;fiddle\\n;;to/from ./resources for now\\n(defn save-patch [patch patch-name]\\n  (with-open [file (io/writer (str \\"./resources/\\" patch-name \\".edn\\"))]\\n    (binding [*out* file] (pp/pprint patch))))\\n\\n(defn load-patch [patch-name]\\n  (with-open [file (io/reader (str \\"./resources/\\" patch-name \\".edn\\"))]\\n    (binding [*in* (java.io.PushbackReader. file)] (edn/read))))" "(def apatch (atom patch))\\n(def server (osc/osc-server 4242))\\n(osc/zero-conf-on)\\n(def client (osc/osc-client \\"gautier.local\\" 8000))\\n(def cchan (async/chan 10))\\n(chan->client cchan client)\\n(osc/osc-listen server (fn [msg] (println \\"Listener\: \\" msg)) \:debug)\\n(reset\! apatch (load-patch \\"testpatch\\"))\\n(patch->buf @apatch b)\\n(transmit-patch cchan @apatch)\\n\\n(osc/osc-rm-all-listeners server)\\n(def schan (async/chan 10))\\n(server->chan server schan)" "\\n\\n;   Copyright (c) Rich Hickey. All rights reserved.\\n;   The use and distribution terms for this software are covered by the\\n;   Eclipse Public License 1.0 (http\://opensource.org/licenses/eclipse-1.0.php)\\n;   which can be found in the file epl-v10.html at the root of this distribution.\\n;   By using this software in any fashion, you are agreeing to be bound by\\n;   the terms of this license.\\n;   You must not remove this notice, or any other, from this software.\\n\\n(ns richhickey.harmonikit\\n  (\:require [overtone.osc \:as osc]\\n            [overtone.osc.util \:as osc-util]\\n            [overtone.sc.buffer \:as buf]\\n            [overtone.sc.server \:as srv]\\n            [overtone.sc.ugens \:as ugen]\\n            [overtone.sc.machinery.synthdef \:as sdef]\\n            [overtone.sc.machinery.server.comms \:as com]\\n            [overtone.studio.inst \:as inst]\\n            [overtone.sc.envelope \:as env]\\n            [overtone.sc.cgens.line \:as lin]\\n            [overtone.sc.node \:as node]\\n             [overtone.live \:as live]\\n            [clojure.core.async \:as async]\\n            [clojure.edn \:as edn]\\n            [clojure.java.io \:as io]\\n            [clojure.pprint \:as pp]\\n            ;; Needed to boot Overtone (Temporary)\\n            [overtone.studio.mixer \:as omix]))\\n\\n\\n;; Boot the Overtone Server for live demo\\n(defonce __AUTO-BOOT__\\n  (when (srv/server-disconnected?)\\n    (omix/boot-server-and-mixer)))\\n\\n;; a dummy patch that will be used to calc offsets and mappings\\n(def patch\\n  {\:harmonikit/rev 1\\n   \:name \\"Patch 42\\"\\n\\n   \:master {\:toggle 1.0}\\n   \:master-curves {\:attack 0.5 \:decay 0.5 \:fade 0.75 \:release 0.0}\\n   \:high-harmonics {\:toggle 1.0 \:taper 0.0}\\n   \:freq-envelope {\:toggle 1.0 \:init 0.5 \:rate 0.5 \:freq -0.5 \:return 0.5\\n                   \:freq-fscale 0.0 \:rate-fscale 0.0 \:freq-ascale 0.0 \:rate-ascale 0.0}\\n   \:lfo {\:toggle 0.0 \:rate 0.2 \:fscale 0.5 \:ramp 0.5 \:amp-mod 0.9 \:freq-mod 0.5 \:depth 0.5}\\n\\n   \:master-env\\n   {\:gain {\:val 0.5 \:fscale 0.15 \:ascale 0.0}\\n    \:delay {\:val 0.0 \:fscale 0.0 \:ascale 0.0}\\n    \:attack {\:val 0.5 \:fscale 0.5 \:ascale -0.75}\\n    \:decay {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n    \:sustain {\:val 0.25 \:fscale 0.0 \:ascale 0.0}\\n    \:fade {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n    \:release {\:val 0.5 \:fscale 0.0 \:ascale 0.0}}\\n\\n   \:harmonics\\n   {\:gain [0.75 0.75 1 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75\\n           0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75]\\n    \:delay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:attack [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:decay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:sustain [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:fade [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:release [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:toggle [1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0]\\n    \:ascale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:fscale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]}\\n\\n   \:resonances\\n   {\:toggle [1.0 1.0 0.0 0.0]\\n    \:freq [0.5 0.65 0.1 0.1]\\n    \:width [0.01 0.01 0.1 0.1]\\n    \:gain [0.95 0.95 0.0 0.0]}})\\n\\n(defn patch-offsets [offset level]\\n  (cond\\n   (map? level) (reduce-kv (fn [[o ret] k v]\\n                             (let [[o nv] (patch-offsets o v)]\\n                               [o (assoc ret k nv)]))\\n                           [offset {}] level)\\n   (vector? level) (reduce (fn [[o ret] v]\\n                             (let [[o nv] (patch-offsets o v)]\\n                               [o (conj ret nv)]))\\n                           [offset []] level)\\n   \:else [(inc offset) offset]))\\n\\n(let [[nparams offsets] (patch-offsets 0 patch)]\\n  (def offsets offsets)\\n  (def nparams nparams))\\n\\n(def BASE_HARMS 24)\\n(def NHARMS 100)\\n\\n;;todo - make buffers part of synth objects to support multitimbral\\n(def b (buf/buffer nparams))\\n\\n(buf/buffer-id b)\\n\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; patching overtone ;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n(defn ugen-deps\\n  \\"Returns a set of the deps (arguments) of this ugen that are themselves\\n  upstream ugens.\\"\\n  [ug]\\n  (set (\#'overtone.sc.synth/ugen-children ug)))\\n\\n(defn topological-sort-ugens-x\\n  \\"Sort into a vector where each node in the directed graph of ugens\\n  will always be preceded by its upstream dependencies.\\n  Depth first, from\:\\n\\n  http\://en.wikipedia.org/wiki/Topological_sorting,\\n\\n  following the advice here\:\\n\\n  http\://supercollider.svn.sourceforge.net/viewvc/supercollider/trunk/common/build/Help/ServerArchitecture/Synth-Definition-File-Format.html\\n\\n  'For greatest efficiency\:\\n\\n  Unit generators should be listed in an order that permits efficient\\n  reuse of connection buffers, which means that a depth first\\n  topological sort of the graph is preferable to breadth first.'\\"\\n  [ugens]\\n  (let [visit (fn visit [[ret visited path \:as acc] ug]\\n                (cond\\n                 (visited ug) acc\\n                 (path ug) (throw (Exception. \\"ugen graph contains cycle\\"))\\n                 \:else\\n                 (let [[ret visited path \:as acc]\\n                       (reduce visit [ret visited (conj path ug)] (ugen-deps ug))]\\n                   [(conj ret ug) (conj visited ug) path])))]\\n    (first (reduce visit [[] \#{} \#{}] ugens))))\\n\\n(alter-var-root \#'overtone.sc.synth/topological-sort-ugens (constantly topological-sort-ugens-x))\\n\\n(defn load-synthdef-x\\n  \\"Synchronously load an Overtone synth definition onto the audio\\n  server. The synthdef is also stored so that it can be re-loaded if the\\n  server gets rebooted. If the server is currently not running, the\\n  synthdef loading is delayed until the server has succesfully\\n  connected.\\"\\n  [sdef]\\n  (assert (sdef/synthdef? sdef))\\n  (dosync (alter sdef/loaded-synthdefs* assoc (\:name sdef) sdef))\\n\\n  (when (srv/server-connected?)\\n    (let [bytes (sdef/synthdef-bytes sdef)]\\n      (com/with-server-sync\\n        (if (< (count bytes) (- osc-util/BUFFER-SIZE 4))\\n          \#(srv/snd \\"/d_recv\\" bytes)\\n          (let [path (str (System/getProperty \\"java.io.tmpdir\\")  (-> (\:name sdef) symbol name) \\".scsyndef\\")]\\n            (sdef/synthdef-write sdef path)\\n            \#(srv/snd \\"/d_load\\" path)))\\n        (str \\"whilst loading synthdef \\" (\:name sdef))))))\\n\\n(alter-var-root \#'overtone.sc.machinery.synthdef/load-synthdef (constantly load-synthdef-x))\\n\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; end patching overtone ;;;;;;;;;;;;;;;;;;;;;;;;;\\n\\n(defn patch->buf [patch buf]\\n  (let [arr (double-array nparams)\\n        blit (fn blit [level offset]\\n               (cond\\n                (map? level) (reduce-kv (fn [_ k v]\\n                                          (blit v (offset k)))\\n                                        nil level)\\n                (vector? level) (dorun (map-indexed (fn [i v]\\n                                                      (let [off (nth offset i)]\\n                                                        (blit v off)))\\n                                                    level))\\n                (number? level) (aset-double arr offset level)))]\\n    (blit patch offsets)\\n    (buf/buffer-write\! buf arr)))\\n\\n(patch->buf patch b)\\n\\n(defn bget\\n  ([bid k] (ugen/index\:kr bid (-> offsets (get k))))\\n  ([bid k1 k2] (ugen/index\:kr bid (-> offsets (get k1) (get k2))))\\n  ([bid k1 k2 k3] (ugen/index\:kr bid (-> offsets (get k1) (get k2) (get k3)))))\\n\\n(defn scaled [aval scale ratio]\\n  (ugen/with-overloaded-ugens\\n    (* aval (ugen/exp (* scale ratio)))))\\n\\n(defn master-scaled [aval bid k aratio fratio]\\n  (ugen/with-overloaded-ugens\\n    (* aval\\n       (ugen/exp (* (bget bid \:master-env k \:ascale) aratio))\\n       (ugen/exp (* (bget bid \:master-env k \:fscale) fratio)))))\\n\\n(defn scale8 [scale]\\n  (ugen/with-overloaded-ugens\\n    (ugen/pow 2 (* 3.0 scale))))\\n\\n(defn hscaled [aval bid h k]\\n  (ugen/with-overloaded-ugens\\n    (* aval (ugen/pow 2 (lin/lin-lin (bget bid \:harmonics k h) -1.0 1.0 -3.0 3.0)))))\\n\\n(defn harm [h hf bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (ugen/with-overloaded-ugens\\n    (let [amp (/ (scaled\\n                  (scaled (bget bid \:harmonics \:gain h) (bget bid \:harmonics \:ascale h) aratio)\\n                  (bget bid \:harmonics \:ascale h) fratio)\\n                 hf)\\n          delay (+ delay (bget bid \:harmonics \:delay h))\\n          attack (hscaled attack bid h \:attack)\\n          decay (hscaled decay bid h \:decay)\\n          sustain (hscaled sustain bid h \:sustain)\\n          fade (hscaled fade bid h \:fade)\\n          release (hscaled release bid h \:release)\\n          ectl (env/envelope [0 0 1.0 sustain 0 0]\\n                              [delay attack decay fade release]\\n                              [0\\n                               (bget bid \:master-curves \:attack)\\n                               (bget bid \:master-curves \:decay)\\n                               (bget bid \:master-curves \:fade)\\n                               (bget bid \:master-curves \:release)]\\n                              4)\\n          env (ugen/env-gen\:kr ectl gate)\\n          hfreq (* hf freq)]\\n      (* (bget bid \:harmonics \:toggle h)\\n         amp env\\n         (ugen/sin-osc hfreq)\\n         ;;anti-alias\\n         (ugen/select\:kr (< hfreq 20000) [0.0 1.0])))))\\n\\n(defmacro primary-harms [n bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (let [hs (map (fn [h]\\n                 `(harm ~h (+ 1 ~h) ~bid ~freq ~gate ~aratio ~fratio ~delay ~attack ~decay ~sustain ~fade ~release))\\n                (range n))]\\n    (cons '+ hs)))\\n\\n(defmacro high-harms [n bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (let [hs (map (fn [h]\\n                  `(harm 23 ~h ~bid ~freq ~gate ~aratio ~fratio ~delay ~attack ~decay ~sustain ~fade ~release))\\n                (range 24 n))]\\n    (cons '+ hs)))\\n\\n(defn lfo [bid depth fratio]\\n  (ugen/with-overloaded-ugens\\n    (let [freq (scaled (lin/lin-lin (bget bid \:lfo \:rate) 0.0 1.0 0.0 20.0)\\n                       fratio (bget bid \:lfo \:fscale))\\n          ectl (env/envelope [0 1.0]\\n                         [(bget bid \:lfo \:ramp)]\\n                         \:linear)\\n          env (ugen/env-gen\:kr ectl)]\\n      (* (+ depth (bget bid \:lfo \:depth)) env (bget bid \:lfo \:toggle) (ugen/sin-osc\:kr freq)))))\\n\\n(defn res [sig bid n]\\n  (ugen/with-overloaded-ugens\\n    (* 10\\n       (bget bid \:resonances \:toggle n)\\n       (bget bid \:resonances \:gain n)\\n       (ugen/resonz sig\\n               (ugen/octcps (lin/lin-lin (bget bid \:resonances \:freq n) 0.0 1.0 1.0 10.0))\\n               (bget bid \:resonances \:width n)))))\\n\\n(defn fine-rate [r]\\n  (ugen/with-overloaded-ugens\\n    (->> r (ugen/pow 2) (+ -1.0) ugen/squared)))\\n\\n(defn fenv [fin bid aratio fratio]\\n  (ugen/with-overloaded-ugens\\n    (let [ffscale (scale8 (bget bid \:freq-envelope \:freq-fscale))\\n          fascale (scale8 (bget bid \:freq-envelope \:freq-ascale))\\n          rfscale (scale8 (bget bid \:freq-envelope \:rate-fscale))\\n          rascale (scale8 (bget bid \:freq-envelope \:rate-ascale))\\n          f0 (bget bid \:freq-envelope \:init);;(scaled (scaled (bget bid \:freq-envelope \:init) ffscale fratio) fascale aratio)\\n          r0 (fine-rate (bget bid \:freq-envelope \:rate));;(scaled (scaled (bget bid \:freq-envelope \:rate) rfscale fratio) rascale aratio)\\n          f1 (bget bid \:freq-envelope \:freq);;(scaled (scaled (bget bid \:freq-envelope \:freq) ffscale fratio) fascale aratio)\\n          r1 (fine-rate (bget bid \:freq-envelope \:return));;(scaled (scaled (bget bid \:freq-envelope \:return) rfscale fratio) rascale aratio)\\n          ectl (env/envelope [f0 f1 0] ;;[1.0 -1.0 0]\\n                         [r0 r1] ;;[1.0 1.0]\\n                         \:linear)\\n          env (ugen/env-gen\:kr ectl)]\\n      (-> fin ugen/cpsoct (+ (* env (bget bid \:freq-envelope \:toggle))) ugen/octcps))))\\n\\n(inst/definst harmonikit\\n  [bid (buf/buffer-id b)\\n   note 60\\n   amp 0.25\\n   gate 1.0\\n   lfo-depth 0.0]\\n  (let [abase 0.125\\n        fbase 220\\n        freq (ugen/midicps note)\\n        aratio (ugen/log (/ amp abase))\\n        fratio (ugen/log (/ freq fbase))\\n        lfo (lfo bid lfo-depth fratio)\\n        envfreq (fenv freq bid aratio fratio)\\n        mfreq (-> envfreq ugen/cpsoct (+ (* (bget bid \:lfo \:freq-mod)\\n                                       (* 0.1 lfo)))\\n                  ugen/octcps)\\n        mamp (-> amp ugen/ampdb (+ (* (bget bid \:lfo \:amp-mod)\\n                                       (* 60.0 lfo)))\\n                 ugen/dbamp)\\n\\n        gain (master-scaled (bget bid \:master-env \:gain \:val) bid \:gain aratio fratio)\\n        delay (bget bid \:master-env \:delay \:val)\\n        attack (master-scaled (fine-rate (bget bid \:master-env \:attack \:val))\\n                              bid \:attack aratio fratio)\\n        decay (master-scaled (* 4 (fine-rate (bget bid \:master-env \:decay \:val)))\\n                             bid \:decay aratio fratio)\\n        sustain (master-scaled (bget bid \:master-env \:sustain \:val) bid \:sustain aratio fratio)\\n        fade (master-scaled (* 20.0 (bget bid \:master-env \:fade \:val))\\n                            bid \:fade aratio fratio)\\n        release (master-scaled (* 4.0 (bget bid \:master-env \:release \:val))\\n                               bid \:release aratio fratio)\\n        ectl (env/envelope [0 0 1.0 sustain 0 0]\\n                            [delay attack decay fade release]\\n                            [0\\n                             (bget bid \:master-curves \:attack)\\n                             (bget bid \:master-curves \:decay)\\n                             (bget bid \:master-curves \:fade)\\n                             (bget bid \:master-curves \:release)]\\n                            4)\\n        env (ugen/env-gen\:kr ectl gate mamp \:action ugen/FREE)\\n        sig (* (bget bid \:master \:toggle)\\n               env gain\\n               (+ (primary-harms 24 bid mfreq gate aratio fratio delay attack decay sustain fade release)\\n                  (high-harms 100 bid mfreq gate aratio fratio delay attack decay sustain fade release)))]\\n    (+ sig\\n       (res sig bid 0)\\n       (res sig bid 1)\\n       (res sig bid 2)\\n       (res sig bid 3))))\\n\\n(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 2 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))\\n\\n(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))\\n\\n(defn chan->client [chan client]\\n  (async/go\\n   (loop []\\n     (let [[path args] (async/<\! chan)]\\n       (apply osc/osc-send client path args)\\n       (recur)))))\\n\\n(defn server->chan [server chan]\\n  (osc/osc-listen server (fn [msg] (async/put\! chan msg)) chan))\\n\\n\\n;;fiddle\\n;;to/from ./resources for now\\n(defn save-patch [patch patch-name]\\n  (with-open [file (io/writer (str \\"./resources/\\" patch-name \\".edn\\"))]\\n    (binding [*out* file] (pp/pprint patch))))\\n\\n(defn load-patch [patch-name]\\n  (with-open [file (io/reader (str \\"./resources/\\" patch-name \\".edn\\"))]\\n    (binding [*in* (java.io.PushbackReader. file)] (edn/read))))\\n\\n(def apatch (atom patch))" "(def server (osc/osc-server 4242))" "(osc/zero-conf-on)" "(def client (osc/osc-client \\"gautier.local\\" 8000))" "(def cchan (async/chan 10))" "(chan->client cchan client)" "(osc/osc-listen server (fn [msg] (println \\"Listener\: \\" msg)) \:debug)" "(reset\! apatch (load-patch \\"testpatch\\"))" "(patch->buf @apatch b)" "(transmit-patch cchan @apatch)" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12))])\\n\\n    ))" " (transmit-patch cchan @apatch)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(harmonikit (buf/buffer-id b) 70)" "(srv/stop)" "(harmonikit (buf/buffer-id b) 70)" "(ns richhickey.harmonikit\\n  (\:require [overtone.osc \:as osc]\\n            [overtone.osc.util \:as osc-util]\\n            [overtone.sc.buffer \:as buf]\\n            [overtone.sc.server \:as srv]\\n            [overtone.sc.ugens \:as ugen]\\n            [overtone.sc.machinery.synthdef \:as sdef]\\n            [overtone.sc.machinery.server.comms \:as com]\\n            [overtone.studio.inst \:as inst]\\n            [overtone.sc.envelope \:as env]\\n            [overtone.sc.cgens.line \:as lin]\\n            [overtone.sc.node \:as node]\\n             [overtone.live \:as live]\\n            [clojure.core.async \:as async]\\n            [clojure.edn \:as edn]\\n            [clojure.java.io \:as io]\\n            [clojure.pprint \:as pp]\\n            ;; Needed to boot Overtone (Temporary)\\n            [overtone.studio.mixer \:as omix]))\\n\\n\\n;; Boot the Overtone Server for live demo\\n(defonce __AUTO-BOOT__\\n  (when (srv/server-disconnected?)\\n    (omix/boot-server-and-mixer)))\\n\\n;; a dummy patch that will be used to calc offsets and mappings\\n(def patch\\n  {\:harmonikit/rev 1\\n   \:name \\"Patch 42\\"\\n\\n   \:master {\:toggle 1.0}\\n   \:master-curves {\:attack 0.5 \:decay 0.5 \:fade 0.75 \:release 0.0}\\n   \:high-harmonics {\:toggle 1.0 \:taper 0.0}\\n   \:freq-envelope {\:toggle 1.0 \:init 0.5 \:rate 0.5 \:freq -0.5 \:return 0.5\\n                   \:freq-fscale 0.0 \:rate-fscale 0.0 \:freq-ascale 0.0 \:rate-ascale 0.0}\\n   \:lfo {\:toggle 0.0 \:rate 0.2 \:fscale 0.5 \:ramp 0.5 \:amp-mod 0.9 \:freq-mod 0.5 \:depth 0.5}\\n\\n   \:master-env\\n   {\:gain {\:val 0.5 \:fscale 0.15 \:ascale 0.0}\\n    \:delay {\:val 0.0 \:fscale 0.0 \:ascale 0.0}\\n    \:attack {\:val 0.5 \:fscale 0.5 \:ascale -0.75}\\n    \:decay {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n    \:sustain {\:val 0.25 \:fscale 0.0 \:ascale 0.0}\\n    \:fade {\:val 0.5 \:fscale 0.0 \:ascale 0.0}\\n    \:release {\:val 0.5 \:fscale 0.0 \:ascale 0.0}}\\n\\n   \:harmonics\\n   {\:gain [0.75 0.75 1 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75\\n           0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75]\\n    \:delay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:attack [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:decay [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:sustain [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:fade [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:release [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:toggle [1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0]\\n    \:ascale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\\n    \:fscale [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]}\\n\\n   \:resonances\\n   {\:toggle [1.0 1.0 0.0 0.0]\\n    \:freq [0.5 0.65 0.1 0.1]\\n    \:width [0.01 0.01 0.1 0.1]\\n    \:gain [0.95 0.95 0.0 0.0]}})\\n\\n(defn patch-offsets [offset level]\\n  (cond\\n   (map? level) (reduce-kv (fn [[o ret] k v]\\n                             (let [[o nv] (patch-offsets o v)]\\n                               [o (assoc ret k nv)]))\\n                           [offset {}] level)\\n   (vector? level) (reduce (fn [[o ret] v]\\n                             (let [[o nv] (patch-offsets o v)]\\n                               [o (conj ret nv)]))\\n                           [offset []] level)\\n   \:else [(inc offset) offset]))\\n\\n(let [[nparams offsets] (patch-offsets 0 patch)]\\n  (def offsets offsets)\\n  (def nparams nparams))\\n\\n(def BASE_HARMS 24)\\n(def NHARMS 100)\\n\\n;;todo - make buffers part of synth objects to support multitimbral\\n(def b (buf/buffer nparams))\\n\\n(buf/buffer-id b)\\n\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; patching overtone ;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n(defn ugen-deps\\n  \\"Returns a set of the deps (arguments) of this ugen that are themselves\\n  upstream ugens.\\"\\n  [ug]\\n  (set (\#'overtone.sc.synth/ugen-children ug)))\\n\\n(defn topological-sort-ugens-x\\n  \\"Sort into a vector where each node in the directed graph of ugens\\n  will always be preceded by its upstream dependencies.\\n  Depth first, from\:\\n\\n  http\://en.wikipedia.org/wiki/Topological_sorting,\\n\\n  following the advice here\:\\n\\n  http\://supercollider.svn.sourceforge.net/viewvc/supercollider/trunk/common/build/Help/ServerArchitecture/Synth-Definition-File-Format.html\\n\\n  'For greatest efficiency\:\\n\\n  Unit generators should be listed in an order that permits efficient\\n  reuse of connection buffers, which means that a depth first\\n  topological sort of the graph is preferable to breadth first.'\\"\\n  [ugens]\\n  (let [visit (fn visit [[ret visited path \:as acc] ug]\\n                (cond\\n                 (visited ug) acc\\n                 (path ug) (throw (Exception. \\"ugen graph contains cycle\\"))\\n                 \:else\\n                 (let [[ret visited path \:as acc]\\n                       (reduce visit [ret visited (conj path ug)] (ugen-deps ug))]\\n                   [(conj ret ug) (conj visited ug) path])))]\\n    (first (reduce visit [[] \#{} \#{}] ugens))))\\n\\n(alter-var-root \#'overtone.sc.synth/topological-sort-ugens (constantly topological-sort-ugens-x))\\n\\n(defn load-synthdef-x\\n  \\"Synchronously load an Overtone synth definition onto the audio\\n  server. The synthdef is also stored so that it can be re-loaded if the\\n  server gets rebooted. If the server is currently not running, the\\n  synthdef loading is delayed until the server has succesfully\\n  connected.\\"\\n  [sdef]\\n  (assert (sdef/synthdef? sdef))\\n  (dosync (alter sdef/loaded-synthdefs* assoc (\:name sdef) sdef))\\n\\n  (when (srv/server-connected?)\\n    (let [bytes (sdef/synthdef-bytes sdef)]\\n      (com/with-server-sync\\n        (if (< (count bytes) (- osc-util/BUFFER-SIZE 4))\\n          \#(srv/snd \\"/d_recv\\" bytes)\\n          (let [path (str (System/getProperty \\"java.io.tmpdir\\")  (-> (\:name sdef) symbol name) \\".scsyndef\\")]\\n            (sdef/synthdef-write sdef path)\\n            \#(srv/snd \\"/d_load\\" path)))\\n        (str \\"whilst loading synthdef \\" (\:name sdef))))))\\n\\n(alter-var-root \#'overtone.sc.machinery.synthdef/load-synthdef (constantly load-synthdef-x))\\n\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; end patching overtone ;;;;;;;;;;;;;;;;;;;;;;;;;\\n\\n(defn patch->buf [patch buf]\\n  (let [arr (double-array nparams)\\n        blit (fn blit [level offset]\\n               (cond\\n                (map? level) (reduce-kv (fn [_ k v]\\n                                          (blit v (offset k)))\\n                                        nil level)\\n                (vector? level) (dorun (map-indexed (fn [i v]\\n                                                      (let [off (nth offset i)]\\n                                                        (blit v off)))\\n                                                    level))\\n                (number? level) (aset-double arr offset level)))]\\n    (blit patch offsets)\\n    (buf/buffer-write\! buf arr)))\\n\\n(patch->buf patch b)\\n\\n(defn bget\\n  ([bid k] (ugen/index\:kr bid (-> offsets (get k))))\\n  ([bid k1 k2] (ugen/index\:kr bid (-> offsets (get k1) (get k2))))\\n  ([bid k1 k2 k3] (ugen/index\:kr bid (-> offsets (get k1) (get k2) (get k3)))))\\n\\n(defn scaled [aval scale ratio]\\n  (ugen/with-overloaded-ugens\\n    (* aval (ugen/exp (* scale ratio)))))\\n\\n(defn master-scaled [aval bid k aratio fratio]\\n  (ugen/with-overloaded-ugens\\n    (* aval\\n       (ugen/exp (* (bget bid \:master-env k \:ascale) aratio))\\n       (ugen/exp (* (bget bid \:master-env k \:fscale) fratio)))))\\n\\n(defn scale8 [scale]\\n  (ugen/with-overloaded-ugens\\n    (ugen/pow 2 (* 3.0 scale))))\\n\\n(defn hscaled [aval bid h k]\\n  (ugen/with-overloaded-ugens\\n    (* aval (ugen/pow 2 (lin/lin-lin (bget bid \:harmonics k h) -1.0 1.0 -3.0 3.0)))))\\n\\n(defn harm [h hf bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (ugen/with-overloaded-ugens\\n    (let [amp (/ (scaled\\n                  (scaled (bget bid \:harmonics \:gain h) (bget bid \:harmonics \:ascale h) aratio)\\n                  (bget bid \:harmonics \:ascale h) fratio)\\n                 hf)\\n          delay (+ delay (bget bid \:harmonics \:delay h))\\n          attack (hscaled attack bid h \:attack)\\n          decay (hscaled decay bid h \:decay)\\n          sustain (hscaled sustain bid h \:sustain)\\n          fade (hscaled fade bid h \:fade)\\n          release (hscaled release bid h \:release)\\n          ectl (env/envelope [0 0 1.0 sustain 0 0]\\n                              [delay attack decay fade release]\\n                              [0\\n                               (bget bid \:master-curves \:attack)\\n                               (bget bid \:master-curves \:decay)\\n                               (bget bid \:master-curves \:fade)\\n                               (bget bid \:master-curves \:release)]\\n                              4)\\n          env (ugen/env-gen\:kr ectl gate)\\n          hfreq (* hf freq)]\\n      (* (bget bid \:harmonics \:toggle h)\\n         amp env\\n         (ugen/sin-osc hfreq)\\n         ;;anti-alias\\n         (ugen/select\:kr (< hfreq 20000) [0.0 1.0])))))\\n\\n(defmacro primary-harms [n bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (let [hs (map (fn [h]\\n                 `(harm ~h (+ 1 ~h) ~bid ~freq ~gate ~aratio ~fratio ~delay ~attack ~decay ~sustain ~fade ~release))\\n                (range n))]\\n    (cons '+ hs)))\\n\\n(defmacro high-harms [n bid freq gate aratio fratio delay attack decay sustain fade release]\\n  (let [hs (map (fn [h]\\n                  `(harm 23 ~h ~bid ~freq ~gate ~aratio ~fratio ~delay ~attack ~decay ~sustain ~fade ~release))\\n                (range 24 n))]\\n    (cons '+ hs)))\\n\\n(defn lfo [bid depth fratio]\\n  (ugen/with-overloaded-ugens\\n    (let [freq (scaled (lin/lin-lin (bget bid \:lfo \:rate) 0.0 1.0 0.0 20.0)\\n                       fratio (bget bid \:lfo \:fscale))\\n          ectl (env/envelope [0 1.0]\\n                         [(bget bid \:lfo \:ramp)]\\n                         \:linear)\\n          env (ugen/env-gen\:kr ectl)]\\n      (* (+ depth (bget bid \:lfo \:depth)) env (bget bid \:lfo \:toggle) (ugen/sin-osc\:kr freq)))))\\n\\n(defn res [sig bid n]\\n  (ugen/with-overloaded-ugens\\n    (* 10\\n       (bget bid \:resonances \:toggle n)\\n       (bget bid \:resonances \:gain n)\\n       (ugen/resonz sig\\n               (ugen/octcps (lin/lin-lin (bget bid \:resonances \:freq n) 0.0 1.0 1.0 10.0))\\n               (bget bid \:resonances \:width n)))))\\n\\n(defn fine-rate [r]\\n  (ugen/with-overloaded-ugens\\n    (->> r (ugen/pow 2) (+ -1.0) ugen/squared)))\\n\\n(defn fenv [fin bid aratio fratio]\\n  (ugen/with-overloaded-ugens\\n    (let [ffscale (scale8 (bget bid \:freq-envelope \:freq-fscale))\\n          fascale (scale8 (bget bid \:freq-envelope \:freq-ascale))\\n          rfscale (scale8 (bget bid \:freq-envelope \:rate-fscale))\\n          rascale (scale8 (bget bid \:freq-envelope \:rate-ascale))\\n          f0 (bget bid \:freq-envelope \:init);;(scaled (scaled (bget bid \:freq-envelope \:init) ffscale fratio) fascale aratio)\\n          r0 (fine-rate (bget bid \:freq-envelope \:rate));;(scaled (scaled (bget bid \:freq-envelope \:rate) rfscale fratio) rascale aratio)\\n          f1 (bget bid \:freq-envelope \:freq);;(scaled (scaled (bget bid \:freq-envelope \:freq) ffscale fratio) fascale aratio)\\n          r1 (fine-rate (bget bid \:freq-envelope \:return));;(scaled (scaled (bget bid \:freq-envelope \:return) rfscale fratio) rascale aratio)\\n          ectl (env/envelope [f0 f1 0] ;;[1.0 -1.0 0]\\n                         [r0 r1] ;;[1.0 1.0]\\n                         \:linear)\\n          env (ugen/env-gen\:kr ectl)]\\n      (-> fin ugen/cpsoct (+ (* env (bget bid \:freq-envelope \:toggle))) ugen/octcps))))\\n\\n(inst/definst harmonikit\\n  [bid (buf/buffer-id b)\\n   note 60\\n   amp 0.25\\n   gate 1.0\\n   lfo-depth 0.0]\\n  (let [abase 0.125\\n        fbase 220\\n        freq (ugen/midicps note)\\n        aratio (ugen/log (/ amp abase))\\n        fratio (ugen/log (/ freq fbase))\\n        lfo (lfo bid lfo-depth fratio)\\n        envfreq (fenv freq bid aratio fratio)\\n        mfreq (-> envfreq ugen/cpsoct (+ (* (bget bid \:lfo \:freq-mod)\\n                                       (* 0.1 lfo)))\\n                  ugen/octcps)\\n        mamp (-> amp ugen/ampdb (+ (* (bget bid \:lfo \:amp-mod)\\n                                       (* 60.0 lfo)))\\n                 ugen/dbamp)\\n\\n        gain (master-scaled (bget bid \:master-env \:gain \:val) bid \:gain aratio fratio)\\n        delay (bget bid \:master-env \:delay \:val)\\n        attack (master-scaled (fine-rate (bget bid \:master-env \:attack \:val))\\n                              bid \:attack aratio fratio)\\n        decay (master-scaled (* 4 (fine-rate (bget bid \:master-env \:decay \:val)))\\n                             bid \:decay aratio fratio)\\n        sustain (master-scaled (bget bid \:master-env \:sustain \:val) bid \:sustain aratio fratio)\\n        fade (master-scaled (* 20.0 (bget bid \:master-env \:fade \:val))\\n                            bid \:fade aratio fratio)\\n        release (master-scaled (* 4.0 (bget bid \:master-env \:release \:val))\\n                               bid \:release aratio fratio)\\n        ectl (env/envelope [0 0 1.0 sustain 0 0]\\n                            [delay attack decay fade release]\\n                            [0\\n                             (bget bid \:master-curves \:attack)\\n                             (bget bid \:master-curves \:decay)\\n                             (bget bid \:master-curves \:fade)\\n                             (bget bid \:master-curves \:release)]\\n                            4)\\n        env (ugen/env-gen\:kr ectl gate mamp \:action ugen/FREE)\\n        sig (* (bget bid \:master \:toggle)\\n               env gain\\n               (+ (primary-harms 24 bid mfreq gate aratio fratio delay attack decay sustain fade release)\\n                  (high-harms 100 bid mfreq gate aratio fratio delay attack decay sustain fade release)))]\\n    (+ sig\\n       (res sig bid 0)\\n       (res sig bid 1)\\n       (res sig bid 2)\\n       (res sig bid 3))))\\n\\n(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 2 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))\\n\\n(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))\\n\\n(defn chan->client [chan client]\\n  (async/go\\n   (loop []\\n     (let [[path args] (async/<\! chan)]\\n       (apply osc/osc-send client path args)\\n       (recur)))))\\n\\n(defn server->chan [server chan]\\n  (osc/osc-listen server (fn [msg] (async/put\! chan msg)) chan))\\n\\n\\n;;fiddle\\n;;to/from ./resources for now\\n(defn save-patch [patch patch-name]\\n  (with-open [file (io/writer (str \\"./resources/\\" patch-name \\".edn\\"))]\\n    (binding [*out* file] (pp/pprint patch))))\\n\\n(defn load-patch [patch-name]\\n  (with-open [file (io/reader (str \\"./resources/\\" patch-name \\".edn\\"))]\\n    (binding [*in* (java.io.PushbackReader. file)] (edn/read))))\\n\\n(def apatch (atom patch))\\n(def server (osc/osc-server 4242))\\n(osc/zero-conf-on)\\n(def client (osc/osc-client \\"gautier.local\\" 8000))\\n(def cchan (async/chan 10))\\n(chan->client cchan client)\\n(osc/osc-listen server (fn [msg] (println \\"Listener\: \\" msg)) \:debug)\\n(reset\! apatch (load-patch \\"testpatch\\"))\\n(patch->buf @apatch b)\\n(transmit-patch cchan @apatch)\\n\\n(osc/osc-rm-all-listeners server)\\n(def schan (async/chan 10))\\n(server->chan server schan)\\n\\n(async/go\\n (loop []\\n   (let [msg (async/<\! schan)]\\n     ;;(prn msg)\\n     (swap\! apatch edit-patch msg)\\n     (patch->buf @apatch b)\\n     (recur))))\\n\\n(def qserver (osc/osc-server 8899))\\n(osc/osc-rm-all-listeners qserver)\\n(def qchan (async/chan 100))\\n(server->chan qserver qchan)\\n(def notes (atom {}))\\n;;(osc-listen qserver (fn [msg] (println \\"Listener\: \\" msg)) \:debug)\\n(async/go\\n (loop []\\n     ;;(prn msg)\\n     (live/on-event [\:midi \:note-on]\\n     (fn [e]\\n      (let [note (\:note e) vel (\:velocity e)]\\n         (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0)))\\n           (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0))))))\\n     (recur)))\\n\\n(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop))))\\n                                  \:\:keyboard-handler)" "(transmit-patch cchan @apatch)" "(server->chan server schan)" "(transmit-patch cchan @apatch)" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (- 1 (edn/read-string s5))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(defn transmit-patch [ch patch]\\n  (let [tx-scalars (fn [k]\\n                     (doseq [[attr v] (k patch)]\\n                       (async/put\! ch [(str \\"/\\" (name k) \\"/\\" (name attr)) [(float v)]])))]\\n    (async/put\! ch [\\"/name\\" [(\:name patch)]])\\n    (doseq [[k attrs] (\:master-env patch)]\\n      (doseq [[attr v] attrs]\\n        (async/put\! ch [(str \\"/master-env/\\" (name k) \\"/\\" (name attr)) [(float v)]])))\\n    (dorun (map tx-scalars [\:master \:master-curves \:freq-envelope \:lfo \:high-harmonics]))\\n    (doseq [[attr vs] (-> patch \:harmonics (dissoc \:toggle))]\\n      (async/put\! ch [(str \\"/harmonics/\\" (name attr)) (map float vs)]))\\n    (doseq [[attr vs] (\:resonances patch)]\\n      (doseq [i (range 4)]\\n        (async/put\! ch [(str \\"/resonances/\\" (name attr) \\"/\\" i) [(float (vs i))]])))\\n    (async/put\! ch [(str \\"/harmonics/toggle/0\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 0 1))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 1 2))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 2 3))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 3 4))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 4 5))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 5 6))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 6 7))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 7 8))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 8 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 9 9))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 10 10))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/0/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 11 11))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/1\\") (map float (subvec (-> patch \:harmonics \:toggle) 12 12))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/2\\") (map float (subvec (-> patch \:harmonics \:toggle) 13 13))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/3\\") (map float (subvec (-> patch \:harmonics \:toggle) 14 14))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/4\\") (map float (subvec (-> patch \:harmonics \:toggle) 15 15))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/5\\") (map float (subvec (-> patch \:harmonics \:toggle) 16 16))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/6\\") (map float (subvec (-> patch \:harmonics \:toggle) 17 17))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/7\\") (map float (subvec (-> patch \:harmonics \:toggle) 18 18))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/8\\") (map float (subvec (-> patch \:harmonics \:toggle) 19 19))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/9\\") (map float (subvec (-> patch \:harmonics \:toggle) 20 20))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/10\\") (map float (subvec (-> patch \:harmonics \:toggle) 21 21))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/11\\") (map float (subvec (-> patch \:harmonics \:toggle) 22 22))])\\n    (async/put\! ch [(str \\"/harmonics/toggle/1/1/12\\") (map float (subvec (-> patch \:harmonics \:toggle) 23 23))])\\n    ))" "(\:toggle (@apatch \:harmonics))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(\:toggle (@apatch \:harmonics))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 ] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(\:toggle (@apatch \:harmonics))" "\\n (async/go\\n (loop []\\n   (let [{\:keys [path args]} (async/<\! qchan)]\\n     ;;(prn msg)\\n     (when (\= path \\"/qunexus/keys/note_and_velocity\\")\\n       (let [[note vel] args]\\n         (if (zero? vel)\\n           (when-let [synth (get @notes note)]\\n             (node/ctl synth \:gate 0.0))\\n           (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0))))))\\n     (recur))))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5 ] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5 ] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (- 1 (edn/read-string s5))]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5 ] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (- 1 (edn/read-string s5))]\\n              (println off)\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(println off)" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5 ] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (- 1 (edn/read-string s5))]\\n              (println off)\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i off) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(\:gain (@apatch \:harmonics))" "(\:toggle (@apatch \:harmonics))" "(\:gain (@apatch \:harmonics))" "(live/odoc vec)" "(live/odoc reduce-kv)" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3))  nb (- 1 (edn/read-string s5)) ]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+(+ i off) nb) v)) % (vec args))))\\n            (assoc-in patch [(keyword s1) (keyword s2)] (vec args)))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(osc/osc-listen server (fn [msg] (println (first (\:args msg)))) \:debug)" "(osc/osc-listen server (fn [msg] (println (\:args msg))) \:debug)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(\:toggle (@apatch \:harmonics))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3)) nb (- 1  (edn/read-string s5)) ]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i nb) v)) % (vec args))))\\n            (let [nba (- 1 (edn/read-string s3)) ]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i nba) v)) %  (vec args)))))\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(def server (osc/osc-server 4242))" "(def client (osc/osc-client \\"gautier-2.local\\" 8000))" "(def qserver (osc/osc-server 8899))" "(def client (osc/osc-client \\"gautier.local\\" 8000))" "(def server (osc-server 44100 \\"osc-clj\\"))" "(def server (osc/osc-server 44100 \\"osc-clj\\"))" "(osc/zero-conf-on)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop))))\\n                                  \:\:keyboard-handler)" "(live/on-event  [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop))))\\n                                  \:\:keyboard-handler)" "(live/event-debug-on)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop))))\\n                                  \:\:keyboard-handler)" "(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (let [synth (get @notes note)]\\n                                  (node/ctl synth \:gate 0.0))))\\n                                  \:\:keyboard-handler)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop)))\\n                                (live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (let [synth (get @notes note)]\\n                                  (node/ctl synth \:gate 0.0))))\\n                                  \:\:keyboard-handler))\\n                                  \:\:keyboard-handler)" "(live/on-event  [\:midi \:note-on]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                   (swap\! notes assoc note (harmonikit (buf/buffer-id b) note (/ vel 127.0)))\\n                                   (if (\=\= 71 note) (srv/stop))))\\n                                  \:\:keyboard-handler-on)\\n\\n(\:toggle (@apatch \:harmonics))\\n(live/on-event [\:midi \:note-off]\\n                              (fn [e]\\n                                (let [note (\:note e) vel (\:velocity e)]\\n                                (let [synth (get @notes note)]\\n                                  (node/ctl synth \:gate 0.0))))\\n                                  \:\:keyboard-handler-off)" "(remove-handler \:\:keyboard-handler)" " (live/remove-handler \:\:keyboard-handler)" "(live/odoc remove-handler)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(\:toggle (@apatch \:harmonics))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3)) nb (- (edn/read-string s5) 1 ) ]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(assoc % (+ nb off) (vec args))))\\n            (let [nba (- (edn/read-string s3) 1 ) ]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(assoc %  nba (vec args)))))\\n\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(\:toggle (@apatch \:harmonics))" "(defn edit-patch [patch {\:keys [^String path args]}]\\n  (let [[s1 s2 s3 s4 s5] (.split (subs path 1) \\"/\\")]\\n    (case s1\\n          \\"master-env\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (keyword s3)] (first args))\\n\\n          (\\"master\\" \\"master-curves\\" \\"freq-envelope\\" \\"lfo\\" \\"high-harmonics\\")\\n          (assoc-in patch [(keyword s1) (keyword s2)] (first args))\\n\\n          \\"harmonics\\"\\n          (if (\= s2 \\"toggle\\")\\n            (let [off (* 12 (edn/read-string s3)) nb (- (edn/read-string s5) 1 ) ]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ (+ i off) nb) v)) % (vec args))))\\n            (let [nba (- (edn/read-string s3) 1 ) ]\\n              (update-in patch [(keyword s1) (keyword s2)]\\n                         \#(reduce-kv (fn [ret i v] (assoc ret (+ i nba) v)) % (vec args)))))\\n\\n\\n          \\"resonances\\"\\n          (assoc-in patch [(keyword s1) (keyword s2) (edn/read-string s3)] (first args))\\n\\n          patch)))" "(\:gain (@apatch \:harmonics))" "(\:toggle (@apatch \:harmonics))" "(\:gain (@apatch \:harmonics))" "(patch->buf patch b)" "(transmit-patch cchan @apatch)" "(patch->buf patch b)" "(transmit-patch cchan @apatch)" "(def apatch (atom patch))\\n(def server (osc/osc-server 4242))\\n(osc/zero-conf-on)\\n(def client (osc/osc-client \\"gautier-3.local\\" 8000))\\n(def cchan (async/chan 10))\\n(chan->client cchan client)\\n(osc/osc-listen server (fn [msg] (println \\"Listener\: \\" msg)) \:debug)\\n(reset\! apatch (load-patch \\"testpatch\\"))\\n(patch->buf @apatch b)\\n(transmit-patch cchan @apatch)" "(live/odoc osc/osc-client)" "(def client (osc/osc-client \\"192.168.0.47\\" 8000))\\n(def cchan (async/chan 10))\\n(chan->client cchan client)\\n(osc/osc-listen server (fn [msg] (println \\"Listener\: \\" msg)) \:debug)\\n(reset\! apatch (load-patch \\"testpatch\\"))\\n(patch->buf @apatch b)\\n(transmit-patch cchan @apatch)" "(patch->buf @apatch b)" "(transmit-patch cchan @apatch)" "(patch->buf patch b)" "(transmit-patch cchan @apatch)" "(patch->buf @apatch b)\\n(transmit-patch cchan @apatch)" "(transmit-patch cchan @apatch)" "(live/event-debug-on)" "(transmit-patch cchan @apatch)" "(live/event-debug-on)" "(live/odoc loop)" "(live/on-event [\:midi \:control-change]\\n                              (fn []\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                )\\n                                  \:\:keyboard-handler-change)" "(live/on-event [\:midi \:control-change]\\n                              (fn [_]\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                (transmit-patch cchan @apatch)\\n                                )\\n                                  \:\:keyboard-handler-change)" "(osc-listen server (fn [msg] (println msg)) \:debug)" "(osc/osc-listen server (fn [msg] (println msg)) \:debug)" "(osc/osc-handle server \\"/1\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/2\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/3\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/4\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/5\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/6\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/7\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/8\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))\\n(osc/osc-handle server \\"/9\\"  (fn [_](transmit-patch cchan @apatch)(transmit-patch cchan @apatch)))" "(osc/osc-handle server \\"/1\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))" "(osc/osc-handle server \\"/1\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/2\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/3\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/4\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/5\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/6\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/7\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/8\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))\\n(osc/osc-handle server \\"/9\\"  (fn [_](for [i (range 10)] (transmit-patch cchan @apatch))))" "(patch->buf patch b)"]
eclipse.preferences.version=1
