cmdhistory=["(definst kick [volume 1.0]\\n  (let [body-freq (* 220 (env-gen (lin-env 0.01 0 0.3 1) \:action NO-ACTION))\\n        body (sin-osc body-freq)\\n        \\n        pop-freq (+ 20 (* 400 (env-gen (lin-env 0.01 0 0.1 1) \:action NO-ACTION)))\\n        pop  (sin-osc pop-freq)\\n        \\n        env  (env-gen (perc 0.001 1.5) \:action FREE)\\n        ]\\n    (* env (+ body pop))))" "(def server (osc-server 44100 \\"osc-clj\\"))\\n(zero-conf-on)\\n\\n(definst kick [volume 1.0]\\n  (let [body-freq (* 220 (env-gen (lin 0.01 0 0.3 1) \:action NO-ACTION))\\n        body (sin-osc body-freq)\\n        \\n        pop-freq (+ 20 (* 400 (env-gen (lin 0.01 0 0.1 1) \:action NO-ACTION)))\\n        pop  (sin-osc pop-freq)\\n        \\n        env  (env-gen (perc 0.001 1.5) \:action FREE)\\n        ]\\n    (* env (+ body pop))))\\n\\n(definst hat []\\n  (let [src (white-noise)\\n        env (env-gen (perc 0.001 0.3) \:action FREE)]\\n    (* 0.7 src env)))\\n\\n(definst bass [freq 50 volume 1.0 wah 1.0]\\n  (let [son (saw freq)\\n        son (* son wah)\\n        son (clip\:ar son 0 1)]\\n    (* volume son)))\\n\\n(definst beep [freq 1100]\\n  (let [src (sin-osc freq)\\n        env (env-gen (perc 0.001 0.3) \:action FREE)]\\n    (* 2 src env)))\\n\\n(definst dubstep [note 25 sweep-rate 4 vol 0 hi? 0 sweep? 0 decimate? 0]\\n  (let [trig (coin-gate 0.5 (impulse\:kr 2))\\n        freq (midicps note)\\n        sweep (lin-exp (lf-saw sweep-rate) -1 1 40 5000)\\n        son (->\\n             (mix (lf-saw (* freq [0.99 1 1.01])))\\n             (lpf sweep)\\n             (normalizer))\\n        son (+ son (bpf son 2000 2))\\n        son (select hi? [son (* 4 (hpf son 1000))])\\n        son (select sweep? [son (* 4 (hpf son sweep))])\\n        son (select decimate? [son (round son 0.1)])\\n        son (tanh (* son 5))\\n        son (+ son (* 0.3 (g-verb son 10 0.1 0.7)))]\\n    (* vol son)))" "(bass)" "(stop)" "(dubstep)" "(stop)" "(beep)" "(zero-conf-on)\\n\\n(definst kick [volume 1.0]\\n  (let [body-freq (* 220 (env-gen (lin 0.01 0 0.3 1) \:action NO-ACTION))\\n        body (sin-osc body-freq)\\n        \\n        pop-freq (+ 20 (* 400 (env-gen (lin 0.01 0 0.1 1) \:action NO-ACTION)))\\n        pop  (sin-osc pop-freq)\\n        \\n        env  (env-gen (perc 0.001 1.5) \:action FREE)\\n        ]\\n    (* env (+ body pop))))\\n\\n(definst hat []\\n  (let [src (white-noise)\\n        env (env-gen (perc 0.001 0.3) \:action FREE)]\\n    (* 0.7 src env)))\\n\\n(definst bass [freq 50 volume 1.0 wah 1.0]\\n  (let [son (saw freq)\\n        son (* son wah)\\n        son (clip\:ar son 0 1)]\\n    (* volume son)))\\n\\n\\n\\n(defn start-osc []\\n  (swap\! server (fn [old-server]\\n                  (if (not (nil? old-server))\\n                    old-server\\n                   (osc-server 44100 \\"osc-clj\\")))))\\n\\n(defn register-debug-listener []\\n  (osc-listen @server (fn [msg] (println msg)) \:debug))\\n\\n(defn remove-debug-listener []\\n  (osc-rm-listener @server \:debug))\\n\\n(defmacro simple-handler [args body]\\n  `(fn [msg\#]\\n     (let [~args (\:args msg\#)]\\n       ~body)))\\n\\n(defn make-piano-handler [note]\\n  (simple-handler [arg]\\n                  (when (not (zero? arg))\\n                    (piano note))))\\n\\n(def piano-map\\n  (let [middle-b 59\\n        indices (range 1 13)\\n        path-from (fn [index] (str \\"/1/push\\" index))\\n        note-from (fn [index] (+ middle-b index))]\\n    (zipmap\\n     (map path-from indices) (map (comp make-piano-handler note-from) indices))))\\n\\n(defn register-handlers [handler-map]\\n  (doseq [[path handler] handler-map]\\n    (osc-handle @server path handler))\\n  @server)\\n\\n\\n\\n(definst beep [freq 1100]\\n  (let [src (sin-osc freq)\\n        env (env-gen (perc 0.001 0.3) \:action FREE)]\\n    (* 2 src env)))\\n\\n(definst dubstep [note 25 sweep-rate 4 vol 0 hi? 0 sweep? 0 decimate? 0]\\n  (let [trig (coin-gate 0.5 (impulse\:kr 2))\\n        freq (midicps note)\\n        sweep (lin-exp (lf-saw sweep-rate) -1 1 40 5000)\\n        son (->\\n             (mix (lf-saw (* freq [0.99 1 1.01])))\\n             (lpf sweep)\\n             (normalizer))\\n        son (+ son (bpf son 2000 2))\\n        son (select hi? [son (* 4 (hpf son 1000))])\\n        son (select sweep? [son (* 4 (hpf son sweep))])\\n        son (select decimate? [son (round son 0.1)])\\n        son (tanh (* son 5))\\n        son (+ son (* 0.3 (g-verb son 10 0.1 0.7)))]\\n    (* vol son)))" "(zero-conf-on)\\n\\n(definst kick [volume 1.0]\\n  (let [body-freq (* 220 (env-gen (lin 0.01 0 0.3 1) \:action NO-ACTION))\\n        body (sin-osc body-freq)\\n        \\n        pop-freq (+ 20 (* 400 (env-gen (lin 0.01 0 0.1 1) \:action NO-ACTION)))\\n        pop  (sin-osc pop-freq)\\n        \\n        env  (env-gen (perc 0.001 1.5) \:action FREE)\\n        ]\\n    (* env (+ body pop))))\\n\\n(definst hat []\\n  (let [src (white-noise)\\n        env (env-gen (perc 0.001 0.3) \:action FREE)]\\n    (* 0.7 src env)))\\n\\n(definst bass [freq 50 volume 1.0 wah 1.0]\\n  (let [son (saw freq)\\n        son (* son wah)\\n        son (clip\:ar son 0 1)]\\n    (* volume son)))\\n\\n(definst beep [freq 1100]\\n  (let [src (sin-osc freq)\\n        env (env-gen (perc 0.001 0.3) \:action FREE)]\\n    (* 2 src env)))\\n\\n(definst dubstep [note 25 sweep-rate 4 vol 0 hi? 0 sweep? 0 decimate? 0]\\n  (let [trig (coin-gate 0.5 (impulse\:kr 2))\\n        freq (midicps note)\\n        sweep (lin-exp (lf-saw sweep-rate) -1 1 40 5000)\\n        son (->\\n             (mix (lf-saw (* freq [0.99 1 1.01])))\\n             (lpf sweep)\\n             (normalizer))\\n        son (+ son (bpf son 2000 2))\\n        son (select hi? [son (* 4 (hpf son 1000))])\\n        son (select sweep? [son (* 4 (hpf son sweep))])\\n        son (select decimate? [son (round son 0.1)])\\n        son (tanh (* son 5))\\n        son (+ son (* 0.3 (g-verb son 10 0.1 0.7)))]\\n    (* vol son)))" "(defonce server (atom nil))" "(defn start-osc []\\n  (swap\! server (fn [old-server]\\n                  (if (not (nil? old-server))\\n                    old-server\\n                    (osc-server 44100 \\"Phil's overtone\\")))))" "(defn register-debug-listener []\\n  (osc-listen @server (fn [msg] (println msg)) \:debug))\\n\\n(defn remove-debug-listener []\\n  (osc-rm-listener @server \:debug))\\n\\n(defmacro simple-handler [args body]\\n  `(fn [msg\#]\\n     (let [~args (\:args msg\#)]\\n       ~body)))\\n\\n(defn make-piano-handler [note]\\n  (simple-handler [arg]\\n                  (when (not (zero? arg))\\n                    (piano note))))\\n\\n(def piano-map\\n  (let [middle-b 59\\n        indices (range 1 13)\\n        path-from (fn [index] (str \\"/1/push\\" index))\\n        note-from (fn [index] (+ middle-b index))]\\n    (zipmap\\n     (map path-from indices) (map (comp make-piano-handler note-from) indices))))\\n\\n(defn register-handlers [handler-map]\\n  (doseq [[path handler] handler-map]\\n    (osc-handle @server path handler))\\n  @server)" "(defonce sequencer-state (atom (vec (repeat 8 (vec (repeat 8 0))))))\\n\\n(defonce beep-freq (atom 1100))\\n\\n(defonce dubstep-note (atom 25))\\n(defonce sweep-rate (atom 4))\\n(defonce sequencer-on? (atom false))\\n\\n(def metro (metronome 256))" "(def inst-map\\n  {0 {1 kick}\\n   1 {1 hat}\\n   2 {1 \#(beep @beep-freq)}\\n   3 dubstep\\n   4 {1 \#(ctl bass \:volume 1) 0 \#(ctl bass \:volume 0)}})" "(defn sequencer [beat notes]\\n  (when @sequencer-on?\\n    (at (metro beat)\\n        (let [mod-beat (mod beat 8)]\\n          (doseq [[index inst] inst-map]\\n            (let [val  (get-in @notes [index mod-beat])\\n                  inst (get inst val (fn [] nil))]\\n              (inst)))))\\n    (apply-at (metro (inc beat)) \#'sequencer (inc beat) [notes])))" "(defn sequencer-off []\\n  (reset\! sequencer-on? false)\\n  (kill inst/bass)\\n  (kill inst/dubstep)\\n  )" "(defn sequencer-off []\\n  (reset\! sequencer-on? false)\\n  (kill bass)\\n  (kill dubstep)\\n  )" "(defn sequencer-on []\\n  (bass \:volume 0)\\n  (reset\! sequencer-on? true)\\n  (sequencer (metro) sequencer-state))\\n\\n(defn make-sequencer-handler [inst beat]\\n  (simple-handler [arg]\\n                  (swap\! sequencer-state\\n                         assoc-in [inst beat] (int arg))))\\n\\n(def ^{\:private true} multitoggle-map-entries\\n  (let [path-from (fn [x y] (str \\"/4/multitoggle/\\" (inc y) \\"/\\" (inc x)))]\\n    (for [x (range 8)\\n          y (range 8)]\\n      [(path-from x y) (make-sequencer-handler x y)])))" "(def sequencer-map\\n  (into\\n   {\\"/4/toggle1\\" (simple-handler [arg] (if (zero? arg) (sequencer-off) (sequencer-on)))\\n    \\"/1/fader1\\"  (simple-handler [arg] (reset\! beep-freq (scale-range arg 0 1 250 1500)))\\n    \\"/1/fader2\\"  (simple-handler [arg] (ctl dubstep \:note (round-to (scale-range arg 0 1 20 50) 1)))\\n    \\"/1/fader3\\"  (simple-handler [arg] (ctl dubstep \:sweep-rate (scale-range arg 0 1 1 16)))\\n    \\"/1/toggle2\\" (simple-handler [arg] (ctl dubstep \:hi? arg))\\n    \\"/1/toggle3\\" (simple-handler [arg] (ctl dubstep \:sweep? arg))\\n    \\"/1/toggle4\\" (simple-handler [arg] (ctl dubstep \:decimate? arg))\\n    \\"/1/fader5\\"  (simple-handler [arg]\\n                                 (let [new-bpm (scale-range arg 0 1 160 500)]\\n                                   (metro \:bpm new-bpm)))\\n    \\"/3/xy\\"      (simple-handler [arg1 arg2]\\n                                 (do\\n                                   (ctl bass \:freq (scale-range arg1 0 1 40 250))\\n                                   (ctl bass \:wah  (scale-range arg2 0 1 1.5 30))))}\\n   multitoggle-map-entries))" "(defn start-osc []\\n  (swap\! server (fn [old-server]\\n                  (if (not (nil? old-server))\\n                    old-server\\n                    (osc-server 44100 \\"Phil's overtone\\")))))" "(register-handlers sequencer-map)" "(defn register-handlers [handler-map]\\n  (doseq [[path handler] handler-map]\\n    (osc-handle @server path handler))\\n  @server)" "(\:use overtone.inst.piano)" "(use 'overtone.inst.piano)" "(defn make-piano-handler [note]\\n  (simple-handler [arg]\\n                  (when (not (zero? arg))\\n                    (piano note))))\\n\\n(def piano-map\\n  (let [middle-b 59\\n        indices (range 1 13)\\n        path-from (fn [index] (str \\"/1/push\\" index))\\n        note-from (fn [index] (+ middle-b index))]\\n    (zipmap\\n     (map path-from indices) (map (comp make-piano-handler note-from) indices))))" "(zero-conf-on)" "(start-osc)" "(register-handlers sequencer-map)" "(osc-listen server (fn [msg] (println msg)) \:debug)" "(bass)" "(piano)" "(\\n  piano)" "(dubstep)" "(beep)" "(kick)" " (osc-listen server (fn [msg] (println msg)) \:debug)" "(bass)" "(piano)" "(stop)" "(osc-listen server (fn [msg] (println msg)) \:debug)" "(bass)" "(def ^{\:private true} multitoggle-map-entries\\n  (let [path-from (fn [x y] (str \\"/1/multitoggle1/\\" (inc x) \\"/\\" (inc y)))]\\n    (for [x (range 8)\\n          y (range 8)]\\n      [(path-from x y) (make-sequencer-handler x y)])))" "(dupstep)" "(dubstep-note)" "(dubstep)" "(bass)" "(def rows 6)\\n(def columns 16)\\n\\n; Note\: I'm using the Beatmachine layout in TouchOSC.\\n;       If you're using a different layout, change the layout and widget arguments to the appropriate name.\\n;       If the client is sending a path of\: \\"/1/someothermultitoggle/1/1\\", you could change it to\:\\n;       (add-multitoggle-handler server 1 \\"someothermultitoggle\\" rows columns)\\n(add-multitoggle-handler server 2 \\"multitoggle\\" rows columns)\\n\\n; Our grid has 16 columns. Subdivide the beat and treat each column as an eighth note.\\n(def one-twenty-bpm (metronome 240))\\n\\n(defn play-column [layout widget col]\\n  (let [activedrums (get-active-in-row layout widget col)]\\n    (doseq [drum activedrums]\\n      (case drum\\n        \\"1\\" (kick)\\n        \\"2\\" (snare)\\n        \\"3\\" (kick2)\\n        \\"4\\" (kick3)\\n        \\"5\\" (open-hat)\\n        \\"6\\" (closed-hat)))))\\n\\n(defn looper [nome]\\n  (let [beat (nome)\\n        beat-at (mod beat columns)]\\n    (at (nome beat) (play-column \\"2\\" \\"multitoggle\\" (str (+ beat-at 1))))\\n    (apply-at (nome beat) looper nome [])))\\n\\n(looper one-twenty-bpm)" "(use 'osc-multitoggle.core)" "(use 'overtone.osc)"]
eclipse.preferences.version=1
